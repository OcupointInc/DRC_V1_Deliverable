
BB_Full_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000715c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb4  08007cb4  0000919c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb4  08007cb4  00008cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cbc  08007cbc  0000919c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cbc  08007cbc  00008cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000019c  24000000  08007cc4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  2400019c  08007e60  0000919c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000810  08007e60  00009810  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cc3  00000000  00000000  000091ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec5  00000000  00000000  00022e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00025d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f35  00000000  00000000  000270e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af44  00000000  00000000  0002801d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a762  00000000  00000000  00062f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00181e02  00000000  00000000  0007d6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ff4c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053fc  00000000  00000000  001ff508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00204904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400019c 	.word	0x2400019c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080073dc 	.word	0x080073dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001a0 	.word	0x240001a0
 80002d4:	080073dc 	.word	0x080073dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <pin_Init>:

Pin control functions Start

*//////////////////////////////////////////////////////////////////////////////

void pin_Init(const Pin_t* pin){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if (pin->isPin > 1){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d906      	bls.n	8000712 <pin_Init+0x1e>
		IOEXP_SetModes(&IOEXP_SPDT, pin->IOX_SPDT_Pin, PIN_INPUT);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	480d      	ldr	r0, [pc, #52]	@ (8000744 <pin_Init+0x50>)
 800070e:	f000 f8ea 	bl	80008e6 <IOEXP_SetModes>
	}
	if (pin->isPin == 1){
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d110      	bne.n	800073c <pin_Init+0x48>
		IOEXP_SetPins(&IOEXP_SPDT, pin->IOX_SPDT_Pin, 0);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	4808      	ldr	r0, [pc, #32]	@ (8000744 <pin_Init+0x50>)
 8000724:	f000 f919 	bl	800095a <IOEXP_SetPins>
		IOEXP_SetPins(&IOEXP_LED, pin->IOX_LED_Pin, pin->defaultAnalog);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	461a      	mov	r2, r3
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <pin_Init+0x54>)
 8000736:	f000 f910 	bl	800095a <IOEXP_SetPins>
	}
	return;
 800073a:	bf00      	nop
 800073c:	bf00      	nop
}
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	24000008 	.word	0x24000008
 8000748:	24000018 	.word	0x24000018

0800074c <pin_SetMode>:

void pin_SetMode(const Pin_t* pin, int mode){
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef initStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]


	if (pin->isPin > 1){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d907      	bls.n	800077e <pin_SetMode+0x32>
		IOEXP_SetModes(&IOEXP_SPDT, pin->isPin, mode);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	481f      	ldr	r0, [pc, #124]	@ (80007f4 <pin_SetMode+0xa8>)
 8000778:	f000 f8b5 	bl	80008e6 <IOEXP_SetModes>
		return;
 800077c:	e037      	b.n	80007ee <pin_SetMode+0xa2>
	}

	if (pin->isPin == 0){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d030      	beq.n	80007e8 <pin_SetMode+0x9c>
		return;
	}

	initStruct.Pin = pin->Pin;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	891b      	ldrh	r3, [r3, #8]
 800078a:	60fb      	str	r3, [r7, #12]
	if (mode == PIN_OUTPUT) {
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d106      	bne.n	80007a0 <pin_SetMode+0x54>
		initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	613b      	str	r3, [r7, #16]
		initStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
		initStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	e006      	b.n	80007ae <pin_SetMode+0x62>
	}
	else if (mode == PIN_INPUT){
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d103      	bne.n	80007ae <pin_SetMode+0x62>
		initStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
		initStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
	}

	HAL_GPIO_Init(pin->Port, &initStruct);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f107 020c 	add.w	r2, r7, #12
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fa9d 	bl	8001cf8 <HAL_GPIO_Init>

	if(pin->has_SPDT){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a9b      	ldrb	r3, [r3, #10]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d012      	beq.n	80007ec <pin_SetMode+0xa0>
		IOEXP_SetPins(&IOEXP_SPDT, pin->IOX_SPDT_Pin, 1);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <pin_SetMode+0xa8>)
 80007d0:	f000 f8c3 	bl	800095a <IOEXP_SetPins>
		IOEXP_SetPins(&IOEXP_LED, pin->IOX_LED_Pin, pin->defaultAnalog);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	4619      	mov	r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	461a      	mov	r2, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <pin_SetMode+0xac>)
 80007e2:	f000 f8ba 	bl	800095a <IOEXP_SetPins>
	}

	return;
 80007e6:	e001      	b.n	80007ec <pin_SetMode+0xa0>
		return;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <pin_SetMode+0xa2>
	return;
 80007ec:	bf00      	nop
}
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000008 	.word	0x24000008
 80007f8:	24000018 	.word	0x24000018

080007fc <pin_Write>:

void pin_Write(const Pin_t* pin, int state){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]

	if (pin->isPin > 1){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d907      	bls.n	800081e <pin_Write+0x22>
		IOEXP_SetPins(&IOEXP_SPDT, pin->isPin, state);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	4808      	ldr	r0, [pc, #32]	@ (8000838 <pin_Write+0x3c>)
 8000818:	f000 f89f 	bl	800095a <IOEXP_SetPins>
		return;
 800081c:	e009      	b.n	8000832 <pin_Write+0x36>
	}

	HAL_GPIO_WritePin(pin->Port, pin->Pin, state);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6858      	ldr	r0, [r3, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	891b      	ldrh	r3, [r3, #8]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	4619      	mov	r1, r3
 800082c:	f001 fc2c 	bl	8002088 <HAL_GPIO_WritePin>

	return;
 8000830:	bf00      	nop
}
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000008 	.word	0x24000008

0800083c <pin_Read>:


int pin_Read(const Pin_t* pin){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	int val = HAL_GPIO_ReadPin(pin->Port, pin->Pin);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	891b      	ldrh	r3, [r3, #8]
 800084c:	4619      	mov	r1, r3
 800084e:	4610      	mov	r0, r2
 8000850:	f001 fc02 	bl	8002058 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	60fb      	str	r3, [r7, #12]
	return val;
 8000858:	68fb      	ldr	r3, [r7, #12]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <IOEXP_Init>:
IO expander functions Start

*//////////////////////////////////////////////////////////////////////////////

//Initialize IO expander from its parameters
void IOEXP_Init(IOEXP_t* IOX){
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af02      	add	r7, sp, #8
 8000868:	6078      	str	r0, [r7, #4]
	//config IO expander

	uint8_t ConfigBytes[4] = {
 800086a:	238c      	movs	r3, #140	@ 0x8c
 800086c:	733b      	strb	r3, [r7, #12]
			IOEXP_Config_CMD,
			(IOX->pinMode >> 16) & 0xFF,
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	0c1b      	lsrs	r3, r3, #16
	uint8_t ConfigBytes[4] = {
 8000874:	b2db      	uxtb	r3, r3
 8000876:	737b      	strb	r3, [r7, #13]
			(IOX->pinMode >>  8) & 0xFF,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	0a1b      	lsrs	r3, r3, #8
	uint8_t ConfigBytes[4] = {
 800087e:	b2db      	uxtb	r3, r3
 8000880:	73bb      	strb	r3, [r7, #14]
			(IOX->pinMode)		 & 0xFF
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689b      	ldr	r3, [r3, #8]
	uint8_t ConfigBytes[4] = {
 8000886:	b2db      	uxtb	r3, r3
 8000888:	73fb      	strb	r3, [r7, #15]
	};

	HAL_I2C_Master_Transmit(IOX->handle, IOX->address << 1, ConfigBytes, 4, 50);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	b299      	uxth	r1, r3
 8000896:	f107 020c 	add.w	r2, r7, #12
 800089a:	2332      	movs	r3, #50	@ 0x32
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2304      	movs	r3, #4
 80008a0:	f001 fcd6 	bl	8002250 <HAL_I2C_Master_Transmit>

	uint8_t pinStateBytes[4] = {
 80008a4:	2384      	movs	r3, #132	@ 0x84
 80008a6:	723b      	strb	r3, [r7, #8]
			IOEXP_PinSet_CMD,
			(IOX->state >> 16) & 0xFF,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0c1b      	lsrs	r3, r3, #16
	uint8_t pinStateBytes[4] = {
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	727b      	strb	r3, [r7, #9]
			(IOX->state >>  8) & 0xFF,
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	0a1b      	lsrs	r3, r3, #8
	uint8_t pinStateBytes[4] = {
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	72bb      	strb	r3, [r7, #10]
			(IOX->state)	   & 0xFF
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
	uint8_t pinStateBytes[4] = {
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	72fb      	strb	r3, [r7, #11]
	};

	HAL_I2C_Master_Transmit(IOX->handle, IOX->address << 1, pinStateBytes, 4, 50);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	b299      	uxth	r1, r3
 80008d0:	f107 0208 	add.w	r2, r7, #8
 80008d4:	2332      	movs	r3, #50	@ 0x32
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2304      	movs	r3, #4
 80008da:	f001 fcb9 	bl	8002250 <HAL_I2C_Master_Transmit>

	return;
 80008de:	bf00      	nop
}
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <IOEXP_SetModes>:

//Set pin Mode of IO expander given a pin or pinMask and Mode  (1 is input, 0 is output)
void IOEXP_SetModes(IOEXP_t* IOX, uint32_t pinMask, int mode){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b088      	sub	sp, #32
 80008ea:	af02      	add	r7, sp, #8
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	uint32_t modeMask = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
	if (mode) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <IOEXP_SetModes+0x1c>
		modeMask = 0xFFFFFF;
 80008fc:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000900:	617b      	str	r3, [r7, #20]
	}

	IOX->pinMode = (pinMask & modeMask) | (~pinMask & IOX->pinMode);
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	401a      	ands	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	43d9      	mvns	r1, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	400b      	ands	r3, r1
 8000912:	431a      	orrs	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	609a      	str	r2, [r3, #8]

	uint8_t ConfigBytes[4] = {
 8000918:	238c      	movs	r3, #140	@ 0x8c
 800091a:	743b      	strb	r3, [r7, #16]
			IOEXP_Config_CMD,
			(IOX->pinMode >> 16) & 0xFF,
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	0c1b      	lsrs	r3, r3, #16
	uint8_t ConfigBytes[4] = {
 8000922:	b2db      	uxtb	r3, r3
 8000924:	747b      	strb	r3, [r7, #17]
			(IOX->pinMode >>  8) & 0xFF,
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	0a1b      	lsrs	r3, r3, #8
	uint8_t ConfigBytes[4] = {
 800092c:	b2db      	uxtb	r3, r3
 800092e:	74bb      	strb	r3, [r7, #18]
			(IOX->pinMode)		 & 0xFF
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	689b      	ldr	r3, [r3, #8]
	uint8_t ConfigBytes[4] = {
 8000934:	b2db      	uxtb	r3, r3
 8000936:	74fb      	strb	r3, [r7, #19]
	};

	HAL_I2C_Master_Transmit(IOX->handle, IOX->address << 1, ConfigBytes, 4, 50);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	b299      	uxth	r1, r3
 8000944:	f107 0210 	add.w	r2, r7, #16
 8000948:	2332      	movs	r3, #50	@ 0x32
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2304      	movs	r3, #4
 800094e:	f001 fc7f 	bl	8002250 <HAL_I2C_Master_Transmit>

	return;
 8000952:	bf00      	nop
}
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <IOEXP_SetPins>:

//Set pin State of IO expander given a pin or pinMask and state
void IOEXP_SetPins(IOEXP_t* IOX, uint32_t pinMask, int state){
 800095a:	b580      	push	{r7, lr}
 800095c:	b088      	sub	sp, #32
 800095e:	af02      	add	r7, sp, #8
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
	uint32_t stateMask = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
	if (state){
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <IOEXP_SetPins+0x1c>
		stateMask = 0xFFFFFF;
 8000970:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000974:	617b      	str	r3, [r7, #20]
	}
	IOX->state = (pinMask & stateMask) | (~pinMask & IOX->state);
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	401a      	ands	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	43d9      	mvns	r1, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	400b      	ands	r3, r1
 8000986:	431a      	orrs	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	60da      	str	r2, [r3, #12]

	uint8_t pinStateBytes[4] = {
 800098c:	2384      	movs	r3, #132	@ 0x84
 800098e:	743b      	strb	r3, [r7, #16]
			IOEXP_PinSet_CMD,
			(IOX->state >> 16) & 0xFF,
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0c1b      	lsrs	r3, r3, #16
	uint8_t pinStateBytes[4] = {
 8000996:	b2db      	uxtb	r3, r3
 8000998:	747b      	strb	r3, [r7, #17]
			(IOX->state >>  8) & 0xFF,
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	0a1b      	lsrs	r3, r3, #8
	uint8_t pinStateBytes[4] = {
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	74bb      	strb	r3, [r7, #18]
			(IOX->state)	   & 0xFF
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	68db      	ldr	r3, [r3, #12]
	uint8_t pinStateBytes[4] = {
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	74fb      	strb	r3, [r7, #19]
	};

	HAL_I2C_Master_Transmit(IOX->handle, IOX->address << 1, pinStateBytes, 4, 50);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	791b      	ldrb	r3, [r3, #4]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	b299      	uxth	r1, r3
 80009b8:	f107 0210 	add.w	r2, r7, #16
 80009bc:	2332      	movs	r3, #50	@ 0x32
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2304      	movs	r3, #4
 80009c2:	f001 fc45 	bl	8002250 <HAL_I2C_Master_Transmit>

	return;
 80009c6:	bf00      	nop
}
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <TestMode1>:
Test Mode functions Begin

*//////////////////////////////////////////////////////////////////////////////


void TestMode1(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	// Test Mode 1 Begin

	// Edge mounted LEDs on DRC will cycle. No need to do anything.

	//clear status LEDs
	IOEXP_SetPins(&IOEXP_SPDT, 0x0000F0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	21f0      	movs	r1, #240	@ 0xf0
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <TestMode1+0x1c>)
 80009da:	f7ff ffbe 	bl	800095a <IOEXP_SetPins>

	//Set Status LEDs to indicate mode 1
	IOEXP_SetPins(&IOEXP_SPDT, 0x000010, 1);
 80009de:	2201      	movs	r2, #1
 80009e0:	2110      	movs	r1, #16
 80009e2:	4802      	ldr	r0, [pc, #8]	@ (80009ec <TestMode1+0x1c>)
 80009e4:	f7ff ffb9 	bl	800095a <IOEXP_SetPins>

	// Test Mode 1 End
	////////////////////////////////////////////////////////////////////
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	24000008 	.word	0x24000008

080009f0 <TestMode2>:

void TestMode2(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	// Set all pins to digital mode, and all pins will be input. DRC will cycle across all LEDs



	//90 pin IO Init to Inputs
	for (int i = 0; i < 90; i++){
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e00a      	b.n	8000a12 <TestMode2+0x22>
		pin_SetMode(pins[i], PIN_INPUT);
 80009fc:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <TestMode2+0x64>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	2101      	movs	r1, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fea0 	bl	800074c <pin_SetMode>
	for (int i = 0; i < 90; i++){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b59      	cmp	r3, #89	@ 0x59
 8000a16:	ddf1      	ble.n	80009fc <TestMode2+0xc>
	}

	//Set all LEDs to indicate digital mode by setting as inputs
	IOEXP_SetModes(&IOEXP_LED, 0xFFFF03, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	490f      	ldr	r1, [pc, #60]	@ (8000a58 <TestMode2+0x68>)
 8000a1c:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <TestMode2+0x6c>)
 8000a1e:	f7ff ff62 	bl	80008e6 <IOEXP_SetModes>

	//Set IO pins 62 and 63 to inputs.
	IOEXP_SetModes(&IOEXP_SPDT, 0x00000C, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	210c      	movs	r1, #12
 8000a26:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <TestMode2+0x70>)
 8000a28:	f7ff ff5d 	bl	80008e6 <IOEXP_SetModes>

	//Set SPDT switches to analog mode.
	IOEXP_SetPins(&IOEXP_SPDT, 0xFFFF03, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	490a      	ldr	r1, [pc, #40]	@ (8000a58 <TestMode2+0x68>)
 8000a30:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <TestMode2+0x70>)
 8000a32:	f7ff ff92 	bl	800095a <IOEXP_SetPins>

	//clear status LEDs
	IOEXP_SetPins(&IOEXP_SPDT, 0x0000F0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	21f0      	movs	r1, #240	@ 0xf0
 8000a3a:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <TestMode2+0x70>)
 8000a3c:	f7ff ff8d 	bl	800095a <IOEXP_SetPins>

	//Set Status LEDs to indicate mode 2
	IOEXP_SetPins(&IOEXP_SPDT, 0x000020, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2120      	movs	r1, #32
 8000a44:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <TestMode2+0x70>)
 8000a46:	f7ff ff88 	bl	800095a <IOEXP_SetPins>

	// Test Mode 2 End
	////////////////////////////////////////////////////////////////////
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000028 	.word	0x24000028
 8000a58:	00ffff03 	.word	0x00ffff03
 8000a5c:	24000018 	.word	0x24000018
 8000a60:	24000008 	.word	0x24000008

08000a64 <TestMode3>:

void TestMode3(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0

	// DRC Read IO Test. Test card will cyle all pins HIGH and LOW for DRC to capture.


	//90 pin IO Init to Outputs
	for (int i = 0; i < 90; i++){
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e00a      	b.n	8000a86 <TestMode3+0x22>
		pin_SetMode(pins[i], PIN_OUTPUT);
 8000a70:	4a29      	ldr	r2, [pc, #164]	@ (8000b18 <TestMode3+0xb4>)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fe66 	bl	800074c <pin_SetMode>
	for (int i = 0; i < 90; i++){
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b59      	cmp	r3, #89	@ 0x59
 8000a8a:	ddf1      	ble.n	8000a70 <TestMode3+0xc>
	}

	//Set all LEDs to indicate digital mode by setting as inputs
	IOEXP_SetModes(&IOEXP_LED, 0xFFFF03, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4923      	ldr	r1, [pc, #140]	@ (8000b1c <TestMode3+0xb8>)
 8000a90:	4823      	ldr	r0, [pc, #140]	@ (8000b20 <TestMode3+0xbc>)
 8000a92:	f7ff ff28 	bl	80008e6 <IOEXP_SetModes>

	//Set IO pins 62 and 63 to outputs.
	IOEXP_SetModes(&IOEXP_SPDT, 0x00000C, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210c      	movs	r1, #12
 8000a9a:	4822      	ldr	r0, [pc, #136]	@ (8000b24 <TestMode3+0xc0>)
 8000a9c:	f7ff ff23 	bl	80008e6 <IOEXP_SetModes>

	//Set SPDT switches to analog mode.
	IOEXP_SetPins(&IOEXP_SPDT, 0xFFFF03, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	491e      	ldr	r1, [pc, #120]	@ (8000b1c <TestMode3+0xb8>)
 8000aa4:	481f      	ldr	r0, [pc, #124]	@ (8000b24 <TestMode3+0xc0>)
 8000aa6:	f7ff ff58 	bl	800095a <IOEXP_SetPins>

	//clear status LEDs
	IOEXP_SetPins(&IOEXP_SPDT, 0x0000F0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	21f0      	movs	r1, #240	@ 0xf0
 8000aae:	481d      	ldr	r0, [pc, #116]	@ (8000b24 <TestMode3+0xc0>)
 8000ab0:	f7ff ff53 	bl	800095a <IOEXP_SetPins>

	//Set Status LEDs to indicate mode 3
	IOEXP_SetPins(&IOEXP_SPDT, 0x000030, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2130      	movs	r1, #48	@ 0x30
 8000ab8:	481a      	ldr	r0, [pc, #104]	@ (8000b24 <TestMode3+0xc0>)
 8000aba:	f7ff ff4e 	bl	800095a <IOEXP_SetPins>

	//90 pin IO LOW to HIGH transition
	for (int i = 0; i < 90; i++){
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	e00d      	b.n	8000ae0 <TestMode3+0x7c>
		pin_Write(pins[i], GPIO_PIN_SET);
 8000ac4:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <TestMode3+0xb4>)
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	2101      	movs	r1, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fe94 	bl	80007fc <pin_Write>
		HAL_Delay(200);
 8000ad4:	20c8      	movs	r0, #200	@ 0xc8
 8000ad6:	f000 ff83 	bl	80019e0 <HAL_Delay>
	for (int i = 0; i < 90; i++){
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b59      	cmp	r3, #89	@ 0x59
 8000ae4:	ddee      	ble.n	8000ac4 <TestMode3+0x60>
	}

	//90 pin IO HIGH to LOW transition
	for (int i = 0; i < 90; i++){
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	e00d      	b.n	8000b08 <TestMode3+0xa4>
		pin_Write(pins[i], GPIO_PIN_RESET);
 8000aec:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <TestMode3+0xb4>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe80 	bl	80007fc <pin_Write>
		HAL_Delay(200);
 8000afc:	20c8      	movs	r0, #200	@ 0xc8
 8000afe:	f000 ff6f 	bl	80019e0 <HAL_Delay>
	for (int i = 0; i < 90; i++){
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3301      	adds	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b59      	cmp	r3, #89	@ 0x59
 8000b0c:	ddee      	ble.n	8000aec <TestMode3+0x88>



	// Test Mode 3 End
	////////////////////////////////////////////////////////////////////
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	24000028 	.word	0x24000028
 8000b1c:	00ffff03 	.word	0x00ffff03
 8000b20:	24000018 	.word	0x24000018
 8000b24:	24000008 	.word	0x24000008

08000b28 <TestMode4>:

void TestMode4(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

	// DRC LSDAC Triangle Wave Test. Test Board will set all SPDT switches to analog mode and SPDT LEDs to DAC Mode


	//Set all LEDs to indicate analog mode by setting as outputs
	IOEXP_SetModes(&IOEXP_LED, 0xFFFF03, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4919      	ldr	r1, [pc, #100]	@ (8000b98 <TestMode4+0x70>)
 8000b32:	481a      	ldr	r0, [pc, #104]	@ (8000b9c <TestMode4+0x74>)
 8000b34:	f7ff fed7 	bl	80008e6 <IOEXP_SetModes>

	//Set all LEDs to indicate Analog DAC mode by setting as 0
	IOEXP_SetPins(&IOEXP_LED, 0xFFFF03, LED_DAC_MODE);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4917      	ldr	r1, [pc, #92]	@ (8000b98 <TestMode4+0x70>)
 8000b3c:	4817      	ldr	r0, [pc, #92]	@ (8000b9c <TestMode4+0x74>)
 8000b3e:	f7ff ff0c 	bl	800095a <IOEXP_SetPins>

	//Set all LEDs to indicate Analog ADC mode by setting as inputs. Pins 50 and 55 not connected to LS DACs
	IOEXP_SetPins(&IOEXP_LED, 0x004001, LED_ADC_MODE);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b48:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <TestMode4+0x74>)
 8000b4a:	f7ff ff06 	bl	800095a <IOEXP_SetPins>

	//Set SPDT switches to analog mode.
	IOEXP_SetPins(&IOEXP_SPDT, 0xFFFF03, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4911      	ldr	r1, [pc, #68]	@ (8000b98 <TestMode4+0x70>)
 8000b52:	4813      	ldr	r0, [pc, #76]	@ (8000ba0 <TestMode4+0x78>)
 8000b54:	f7ff ff01 	bl	800095a <IOEXP_SetPins>

	//clear status LEDs
	IOEXP_SetPins(&IOEXP_SPDT, 0x0000F0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	21f0      	movs	r1, #240	@ 0xf0
 8000b5c:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <TestMode4+0x78>)
 8000b5e:	f7ff fefc 	bl	800095a <IOEXP_SetPins>

	//Set Status LEDs to indicate mode 4
	IOEXP_SetPins(&IOEXP_SPDT, 0x000040, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2140      	movs	r1, #64	@ 0x40
 8000b66:	480e      	ldr	r0, [pc, #56]	@ (8000ba0 <TestMode4+0x78>)
 8000b68:	f7ff fef7 	bl	800095a <IOEXP_SetPins>

	//90 pin IO HIGH to LOW transition
	for (int i = 0; i < 90; i++){
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	e00a      	b.n	8000b88 <TestMode4+0x60>
		pin_Write(pins[i], GPIO_PIN_RESET);
 8000b72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba4 <TestMode4+0x7c>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fe3d 	bl	80007fc <pin_Write>
	for (int i = 0; i < 90; i++){
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3301      	adds	r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b59      	cmp	r3, #89	@ 0x59
 8000b8c:	ddf1      	ble.n	8000b72 <TestMode4+0x4a>
	}

	// Test Mode 4 End
	////////////////////////////////////////////////////////////////////
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	00ffff03 	.word	0x00ffff03
 8000b9c:	24000018 	.word	0x24000018
 8000ba0:	24000008 	.word	0x24000008
 8000ba4:	24000028 	.word	0x24000028

08000ba8 <TestMode5>:

void TestMode5(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

	// LSDAC Fast Square Wave Test. Test Board will set all SPDT switches to analog mode and SPDT LEDs to DAC Mode


	//Set all LEDs to indicate analog mode by setting as outputs
	IOEXP_SetModes(&IOEXP_LED, 0xFFFF03, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4919      	ldr	r1, [pc, #100]	@ (8000c18 <TestMode5+0x70>)
 8000bb2:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <TestMode5+0x74>)
 8000bb4:	f7ff fe97 	bl	80008e6 <IOEXP_SetModes>

	//Set all LEDs to indicate Analog DAC mode by setting as inputs
	IOEXP_SetPins(&IOEXP_LED, 0xFFFF03, LED_DAC_MODE);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4917      	ldr	r1, [pc, #92]	@ (8000c18 <TestMode5+0x70>)
 8000bbc:	4817      	ldr	r0, [pc, #92]	@ (8000c1c <TestMode5+0x74>)
 8000bbe:	f7ff fecc 	bl	800095a <IOEXP_SetPins>

	//Set all LEDs to indicate Analog ADC mode by setting as inputs. Pins 50 and 55 not connected to LS DACs
	IOEXP_SetPins(&IOEXP_LED, 0x004001, LED_ADC_MODE);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bc8:	4814      	ldr	r0, [pc, #80]	@ (8000c1c <TestMode5+0x74>)
 8000bca:	f7ff fec6 	bl	800095a <IOEXP_SetPins>

	//Set SPDT switches to analog mode.
	IOEXP_SetPins(&IOEXP_SPDT, 0xFFFF03, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4911      	ldr	r1, [pc, #68]	@ (8000c18 <TestMode5+0x70>)
 8000bd2:	4813      	ldr	r0, [pc, #76]	@ (8000c20 <TestMode5+0x78>)
 8000bd4:	f7ff fec1 	bl	800095a <IOEXP_SetPins>

	//clear status LEDs
	IOEXP_SetPins(&IOEXP_SPDT, 0x0000F0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	21f0      	movs	r1, #240	@ 0xf0
 8000bdc:	4810      	ldr	r0, [pc, #64]	@ (8000c20 <TestMode5+0x78>)
 8000bde:	f7ff febc 	bl	800095a <IOEXP_SetPins>

	//Set Status LEDs to indicate mode 5
	IOEXP_SetPins(&IOEXP_SPDT, 0x000050, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2150      	movs	r1, #80	@ 0x50
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <TestMode5+0x78>)
 8000be8:	f7ff feb7 	bl	800095a <IOEXP_SetPins>

	//90 pin IO HIGH to LOW transition
	for (int i = 0; i < 90; i++){
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	e00a      	b.n	8000c08 <TestMode5+0x60>
		pin_Write(pins[i], GPIO_PIN_RESET);
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <TestMode5+0x7c>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fdfd 	bl	80007fc <pin_Write>
	for (int i = 0; i < 90; i++){
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3301      	adds	r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b59      	cmp	r3, #89	@ 0x59
 8000c0c:	ddf1      	ble.n	8000bf2 <TestMode5+0x4a>
	}

	// Test Mode 5 End
	////////////////////////////////////////////////////////////////////
}
 8000c0e:	bf00      	nop
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	00ffff03 	.word	0x00ffff03
 8000c1c:	24000018 	.word	0x24000018
 8000c20:	24000008 	.word	0x24000008
 8000c24:	24000028 	.word	0x24000028

08000c28 <TestMode6>:

void TestMode6(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

	// HS ADC/DAC loopback test for channel A. Test Board will set all SPDT switches to analog mode and SPDT LEDs to DRC ADC/DAC Mode


	//Set all LEDs to indicate analog mode by setting as outputs
	IOEXP_SetModes(&IOEXP_LED, 0xFFFF03, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4919      	ldr	r1, [pc, #100]	@ (8000c98 <TestMode6+0x70>)
 8000c32:	481a      	ldr	r0, [pc, #104]	@ (8000c9c <TestMode6+0x74>)
 8000c34:	f7ff fe57 	bl	80008e6 <IOEXP_SetModes>

	//Set all LEDs to indicate ADC Mode
	IOEXP_SetPins(&IOEXP_LED, 0xFFFF03, LED_ADC_MODE);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4917      	ldr	r1, [pc, #92]	@ (8000c98 <TestMode6+0x70>)
 8000c3c:	4817      	ldr	r0, [pc, #92]	@ (8000c9c <TestMode6+0x74>)
 8000c3e:	f7ff fe8c 	bl	800095a <IOEXP_SetPins>

	//Set Pins 21, 17, 33, 2 for DAC mode
	IOEXP_SetPins(&IOEXP_LED, 0xB10000, LED_DAC_MODE);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 0131 	mov.w	r1, #11599872	@ 0xb10000
 8000c48:	4814      	ldr	r0, [pc, #80]	@ (8000c9c <TestMode6+0x74>)
 8000c4a:	f7ff fe86 	bl	800095a <IOEXP_SetPins>

	//Set SPDT switches to analog mode.
	IOEXP_SetPins(&IOEXP_SPDT, 0xFFFF03, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4911      	ldr	r1, [pc, #68]	@ (8000c98 <TestMode6+0x70>)
 8000c52:	4813      	ldr	r0, [pc, #76]	@ (8000ca0 <TestMode6+0x78>)
 8000c54:	f7ff fe81 	bl	800095a <IOEXP_SetPins>

	//clear status LEDs
	IOEXP_SetPins(&IOEXP_SPDT, 0x0000F0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	21f0      	movs	r1, #240	@ 0xf0
 8000c5c:	4810      	ldr	r0, [pc, #64]	@ (8000ca0 <TestMode6+0x78>)
 8000c5e:	f7ff fe7c 	bl	800095a <IOEXP_SetPins>

	//Set Status LEDs to indicate mode 6
	IOEXP_SetPins(&IOEXP_SPDT, 0x000060, 1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2160      	movs	r1, #96	@ 0x60
 8000c66:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <TestMode6+0x78>)
 8000c68:	f7ff fe77 	bl	800095a <IOEXP_SetPins>

	//90 pin IO HIGH to LOW transition
	for (int i = 0; i < 90; i++){
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	e00a      	b.n	8000c88 <TestMode6+0x60>
		pin_Write(pins[i], GPIO_PIN_RESET);
 8000c72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <TestMode6+0x7c>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fdbd 	bl	80007fc <pin_Write>
	for (int i = 0; i < 90; i++){
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b59      	cmp	r3, #89	@ 0x59
 8000c8c:	ddf1      	ble.n	8000c72 <TestMode6+0x4a>
	}

	// Test Mode 6 End
	////////////////////////////////////////////////////////////////////
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	00ffff03 	.word	0x00ffff03
 8000c9c:	24000018 	.word	0x24000018
 8000ca0:	24000008 	.word	0x24000008
 8000ca4:	24000028 	.word	0x24000028

08000ca8 <TestMode7>:

void TestMode7(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

	// HS ADC/DAC loopback test for channel B. Test Board will set all SPDT switches to analog mode and SPDT LEDs to DRC ADC/DAC Mode


	//Set all LEDs to indicate analog mode by setting as outputs
	IOEXP_SetModes(&IOEXP_LED, 0xFFFF03, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4919      	ldr	r1, [pc, #100]	@ (8000d18 <TestMode7+0x70>)
 8000cb2:	481a      	ldr	r0, [pc, #104]	@ (8000d1c <TestMode7+0x74>)
 8000cb4:	f7ff fe17 	bl	80008e6 <IOEXP_SetModes>

	//Set all LEDs to indicate ADC Mode
	IOEXP_SetPins(&IOEXP_LED, 0xFFFF03, LED_ADC_MODE);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4917      	ldr	r1, [pc, #92]	@ (8000d18 <TestMode7+0x70>)
 8000cbc:	4817      	ldr	r0, [pc, #92]	@ (8000d1c <TestMode7+0x74>)
 8000cbe:	f7ff fe4c 	bl	800095a <IOEXP_SetPins>

	//Set Pins 21, 17, 33, 2 for DAC mode
	IOEXP_SetPins(&IOEXP_LED, 0x40B000, LED_DAC_MODE);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4916      	ldr	r1, [pc, #88]	@ (8000d20 <TestMode7+0x78>)
 8000cc6:	4815      	ldr	r0, [pc, #84]	@ (8000d1c <TestMode7+0x74>)
 8000cc8:	f7ff fe47 	bl	800095a <IOEXP_SetPins>

	//Set SPDT switches to analog mode.
	IOEXP_SetPins(&IOEXP_SPDT, 0xFFFF03, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4912      	ldr	r1, [pc, #72]	@ (8000d18 <TestMode7+0x70>)
 8000cd0:	4814      	ldr	r0, [pc, #80]	@ (8000d24 <TestMode7+0x7c>)
 8000cd2:	f7ff fe42 	bl	800095a <IOEXP_SetPins>

	//clear status LEDs
	IOEXP_SetPins(&IOEXP_SPDT, 0x0000F0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	21f0      	movs	r1, #240	@ 0xf0
 8000cda:	4812      	ldr	r0, [pc, #72]	@ (8000d24 <TestMode7+0x7c>)
 8000cdc:	f7ff fe3d 	bl	800095a <IOEXP_SetPins>

	//Set Status LEDs to indicate mode 7
	IOEXP_SetPins(&IOEXP_SPDT, 0x000070, 1);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2170      	movs	r1, #112	@ 0x70
 8000ce4:	480f      	ldr	r0, [pc, #60]	@ (8000d24 <TestMode7+0x7c>)
 8000ce6:	f7ff fe38 	bl	800095a <IOEXP_SetPins>

	//90 pin IO HIGH to LOW transition
	for (int i = 0; i < 90; i++){
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	e00a      	b.n	8000d06 <TestMode7+0x5e>
		pin_Write(pins[i], GPIO_PIN_RESET);
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <TestMode7+0x80>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fd7e 	bl	80007fc <pin_Write>
	for (int i = 0; i < 90; i++){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3301      	adds	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b59      	cmp	r3, #89	@ 0x59
 8000d0a:	ddf1      	ble.n	8000cf0 <TestMode7+0x48>
	}

	// Test Mode 7 End
	////////////////////////////////////////////////////////////////////
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	00ffff03 	.word	0x00ffff03
 8000d1c:	24000018 	.word	0x24000018
 8000d20:	0040b000 	.word	0x0040b000
 8000d24:	24000008 	.word	0x24000008
 8000d28:	24000028 	.word	0x24000028

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d32:	f000 fb75 	bl	8001420 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d3a:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d3c:	bf00      	nop
 8000d3e:	4b62      	ldr	r3, [pc, #392]	@ (8000ec8 <main+0x19c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d004      	beq.n	8000d54 <main+0x28>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1e5a      	subs	r2, r3, #1
 8000d4e:	60fa      	str	r2, [r7, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	dcf4      	bgt.n	8000d3e <main+0x12>
  if ( timeout < 0 )
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	da01      	bge.n	8000d5e <main+0x32>
  {
  Error_Handler();
 8000d5a:	f000 fb8d 	bl	8001478 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f000 fdad 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f8bd 	bl	8000ee0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d66:	4b58      	ldr	r3, [pc, #352]	@ (8000ec8 <main+0x19c>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a56      	ldr	r2, [pc, #344]	@ (8000ec8 <main+0x19c>)
 8000d6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b54      	ldr	r3, [pc, #336]	@ (8000ec8 <main+0x19c>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f001 f999 	bl	80020bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f001 f9af 	bl	80020f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d96:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d98:	bf00      	nop
 8000d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec8 <main+0x19c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d104      	bne.n	8000db0 <main+0x84>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	60fa      	str	r2, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	dcf4      	bgt.n	8000d9a <main+0x6e>
if ( timeout < 0 )
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	da01      	bge.n	8000dba <main+0x8e>
{
Error_Handler();
 8000db6:	f000 fb5f 	bl	8001478 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f000 fa25 	bl	8001208 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000dbe:	f000 f90f 	bl	8000fe0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000dc2:	f000 f94d 	bl	8001060 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000dc6:	f000 f9a1 	bl	800110c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dca:	f000 f9eb 	bl	80011a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  //IO expander initialization
  IOEXP_Init(&IOEXP_SPDT);
 8000dce:	483f      	ldr	r0, [pc, #252]	@ (8000ecc <main+0x1a0>)
 8000dd0:	f7ff fd47 	bl	8000862 <IOEXP_Init>
  IOEXP_Init(&IOEXP_LED);
 8000dd4:	483e      	ldr	r0, [pc, #248]	@ (8000ed0 <main+0x1a4>)
 8000dd6:	f7ff fd44 	bl	8000862 <IOEXP_Init>

  //IOEXP_SetModes(&IOEXP_SPDT, 0x00000C, 0);
  //IOEXP_SetPins(&IOEXP_SPDT, 0x00000C, 0);
  //IOEXP_SetModes(&IOEXP_LED, 0xFFFF03, 1);
  //90 pin connector IO initialization
  for (int i = 0; i < 90; i++){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	e019      	b.n	8000e14 <main+0xe8>
	  pin_Init(pins[i]);
 8000de0:	4a3c      	ldr	r2, [pc, #240]	@ (8000ed4 <main+0x1a8>)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fc83 	bl	80006f4 <pin_Init>
	  pin_SetMode(pins[i], PIN_OUTPUT);
 8000dee:	4a39      	ldr	r2, [pc, #228]	@ (8000ed4 <main+0x1a8>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fca7 	bl	800074c <pin_SetMode>
	  pin_Write(pins[i], GPIO_PIN_RESET);
 8000dfe:	4a35      	ldr	r2, [pc, #212]	@ (8000ed4 <main+0x1a8>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fcf7 	bl	80007fc <pin_Write>
  for (int i = 0; i < 90; i++){
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b59      	cmp	r3, #89	@ 0x59
 8000e18:	dde2      	ble.n	8000de0 <main+0xb4>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int modeCount = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
	  pin_SetMode(&PIN88, PIN_INPUT);
 8000e1e:	2101      	movs	r1, #1
 8000e20:	482d      	ldr	r0, [pc, #180]	@ (8000ed8 <main+0x1ac>)
 8000e22:	f7ff fc93 	bl	800074c <pin_SetMode>
	  pin_SetMode(&PIN89, PIN_INPUT);
 8000e26:	2101      	movs	r1, #1
 8000e28:	482c      	ldr	r0, [pc, #176]	@ (8000edc <main+0x1b0>)
 8000e2a:	f7ff fc8f 	bl	800074c <pin_SetMode>
	  while(!pin_Read(&PIN89)){
 8000e2e:	e015      	b.n	8000e5c <main+0x130>
		  while(!pin_Read(&PIN88)){
			  if(pin_Read(&PIN89)){
 8000e30:	482a      	ldr	r0, [pc, #168]	@ (8000edc <main+0x1b0>)
 8000e32:	f7ff fd03 	bl	800083c <pin_Read>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d116      	bne.n	8000e6a <main+0x13e>
		  while(!pin_Read(&PIN88)){
 8000e3c:	4826      	ldr	r0, [pc, #152]	@ (8000ed8 <main+0x1ac>)
 8000e3e:	f7ff fcfd 	bl	800083c <pin_Read>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f3      	beq.n	8000e30 <main+0x104>
				  goto endCount;
			  }
		  }
		  while(pin_Read(&PIN88)){}
 8000e48:	bf00      	nop
 8000e4a:	4823      	ldr	r0, [pc, #140]	@ (8000ed8 <main+0x1ac>)
 8000e4c:	f7ff fcf6 	bl	800083c <pin_Read>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f9      	bne.n	8000e4a <main+0x11e>
		  modeCount++;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
	  while(!pin_Read(&PIN89)){
 8000e5c:	481f      	ldr	r0, [pc, #124]	@ (8000edc <main+0x1b0>)
 8000e5e:	f7ff fced 	bl	800083c <pin_Read>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0e9      	beq.n	8000e3c <main+0x110>
	  }
	  endCount:
 8000e68:	e000      	b.n	8000e6c <main+0x140>
				  goto endCount;
 8000e6a:	bf00      	nop

	  switch(modeCount){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b07      	cmp	r3, #7
 8000e70:	d827      	bhi.n	8000ec2 <main+0x196>
 8000e72:	a201      	add	r2, pc, #4	@ (adr r2, 8000e78 <main+0x14c>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000ec3 	.word	0x08000ec3
 8000e7c:	08000e99 	.word	0x08000e99
 8000e80:	08000e9f 	.word	0x08000e9f
 8000e84:	08000ea5 	.word	0x08000ea5
 8000e88:	08000eab 	.word	0x08000eab
 8000e8c:	08000eb1 	.word	0x08000eb1
 8000e90:	08000eb7 	.word	0x08000eb7
 8000e94:	08000ebd 	.word	0x08000ebd
	  case 0:
		  break;
	  case 1:
		  TestMode1();
 8000e98:	f7ff fd9a 	bl	80009d0 <TestMode1>
		  break;
 8000e9c:	e012      	b.n	8000ec4 <main+0x198>
	  case 2:
		  TestMode2();
 8000e9e:	f7ff fda7 	bl	80009f0 <TestMode2>
		  break;
 8000ea2:	e00f      	b.n	8000ec4 <main+0x198>
	  case 3:
		  TestMode3();
 8000ea4:	f7ff fdde 	bl	8000a64 <TestMode3>
		  break;
 8000ea8:	e00c      	b.n	8000ec4 <main+0x198>
	  case 4:
		  TestMode4();
 8000eaa:	f7ff fe3d 	bl	8000b28 <TestMode4>
		  break;
 8000eae:	e009      	b.n	8000ec4 <main+0x198>
	  case 5:
		  TestMode5();
 8000eb0:	f7ff fe7a 	bl	8000ba8 <TestMode5>
		  break;
 8000eb4:	e006      	b.n	8000ec4 <main+0x198>
	  case 6:
		  TestMode6();
 8000eb6:	f7ff feb7 	bl	8000c28 <TestMode6>
		  break;
 8000eba:	e003      	b.n	8000ec4 <main+0x198>
	  case 7:
		  TestMode7();
 8000ebc:	f7ff fef4 	bl	8000ca8 <TestMode7>
		  break;
 8000ec0:	e000      	b.n	8000ec4 <main+0x198>
	  default:
		  break;
 8000ec2:	bf00      	nop
  {
 8000ec4:	e7a9      	b.n	8000e1a <main+0xee>
 8000ec6:	bf00      	nop
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	24000008 	.word	0x24000008
 8000ed0:	24000018 	.word	0x24000018
 8000ed4:	24000028 	.word	0x24000028
 8000ed8:	08007c44 	.word	0x08007c44
 8000edc:	08007c5c 	.word	0x08007c5c

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b09c      	sub	sp, #112	@ 0x70
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	224c      	movs	r2, #76	@ 0x4c
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f006 fa47 	bl	8007382 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 fa41 	bl	8007382 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f00:	2002      	movs	r0, #2
 8000f02:	f001 fe9f 	bl	8002c44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b33      	ldr	r3, [pc, #204]	@ (8000fd8 <SystemClock_Config+0xf8>)
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	4a32      	ldr	r2, [pc, #200]	@ (8000fd8 <SystemClock_Config+0xf8>)
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f16:	4b30      	ldr	r3, [pc, #192]	@ (8000fd8 <SystemClock_Config+0xf8>)
 8000f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	4b2e      	ldr	r3, [pc, #184]	@ (8000fdc <SystemClock_Config+0xfc>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f28:	4a2c      	ldr	r2, [pc, #176]	@ (8000fdc <SystemClock_Config+0xfc>)
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <SystemClock_Config+0xfc>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f3c:	bf00      	nop
 8000f3e:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <SystemClock_Config+0xfc>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f4a:	d1f8      	bne.n	8000f3e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f50:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5a:	2340      	movs	r3, #64	@ 0x40
 8000f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f62:	2302      	movs	r3, #2
 8000f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 13;
 8000f6a:	230d      	movs	r3, #13
 8000f6c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f72:	2303      	movs	r3, #3
 8000f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fec4 	bl	8002d18 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f96:	f000 fa6f 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	233f      	movs	r3, #63	@ 0x3f
 8000f9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fae:	2340      	movs	r3, #64	@ 0x40
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fb03 	bl	80035cc <HAL_RCC_ClockConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000fcc:	f000 fa54 	bl	8001478 <Error_Handler>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3770      	adds	r7, #112	@ 0x70
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58000400 	.word	0x58000400
 8000fdc:	58024800 	.word	0x58024800

08000fe0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_I2C2_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8001058 <MX_I2C2_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_I2C2_Init+0x74>)
 8000fec:	4a1b      	ldr	r2, [pc, #108]	@ (800105c <MX_I2C2_Init+0x7c>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_I2C2_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_I2C2_Init+0x74>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_I2C2_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_I2C2_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_I2C2_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_I2C2_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_I2C2_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800101a:	480e      	ldr	r0, [pc, #56]	@ (8001054 <MX_I2C2_Init+0x74>)
 800101c:	f001 f87c 	bl	8002118 <HAL_I2C_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001026:	f000 fa27 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4809      	ldr	r0, [pc, #36]	@ (8001054 <MX_I2C2_Init+0x74>)
 800102e:	f001 fc41 	bl	80028b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001038:	f000 fa1e 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800103c:	2100      	movs	r1, #0
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_I2C2_Init+0x74>)
 8001040:	f001 fc83 	bl	800294a <HAL_I2CEx_ConfigDigitalFilter>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 fa15 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	240001b8 	.word	0x240001b8
 8001058:	40005800 	.word	0x40005800
 800105c:	00707cbb 	.word	0x00707cbb

08001060 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <MX_SPI1_Init+0xa4>)
 8001066:	4a28      	ldr	r2, [pc, #160]	@ (8001108 <MX_SPI1_Init+0xa8>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <MX_SPI1_Init+0xa4>)
 800106c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001070:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <MX_SPI1_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001078:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <MX_SPI1_Init+0xa4>)
 800107a:	2207      	movs	r2, #7
 800107c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <MX_SPI1_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <MX_SPI1_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_SPI1_Init+0xa4>)
 800108c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001090:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <MX_SPI1_Init+0xa4>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001098:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <MX_SPI1_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a0:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_SPI1_Init+0xa4>)
 80010f2:	f004 fc23 	bl	800593c <HAL_SPI_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80010fc:	f000 f9bc 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2400020c 	.word	0x2400020c
 8001108:	40013000 	.word	0x40013000

0800110c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001112:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <MX_USART1_UART_Init+0x94>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001154:	4811      	ldr	r0, [pc, #68]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001156:	f004 fd30 	bl	8005bba <HAL_UART_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001160:	f000 f98a 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001168:	f005 fd39 	bl	8006bde <HAL_UARTEx_SetTxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001172:	f000 f981 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800117a:	f005 fd6e 	bl	8006c5a <HAL_UARTEx_SetRxFifoThreshold>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001184:	f000 f978 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800118a:	f005 fcef 	bl	8006b6c <HAL_UARTEx_DisableFifoMode>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001194:	f000 f970 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	24000294 	.word	0x24000294
 80011a0:	40011000 	.word	0x40011000

080011a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011aa:	4a16      	ldr	r2, [pc, #88]	@ (8001204 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b0:	2209      	movs	r2, #9
 80011b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ec:	f001 fbf9 	bl	80029e2 <HAL_PCD_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011f6:	f000 f93f 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	24000328 	.word	0x24000328
 8001204:	40080000 	.word	0x40080000

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b78      	ldr	r3, [pc, #480]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001224:	4a76      	ldr	r2, [pc, #472]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800122e:	4b74      	ldr	r3, [pc, #464]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123c:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001242:	4a6f      	ldr	r2, [pc, #444]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124c:	4b6c      	ldr	r3, [pc, #432]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125a:	4b69      	ldr	r3, [pc, #420]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001260:	4a67      	ldr	r2, [pc, #412]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b61      	ldr	r3, [pc, #388]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127e:	4a60      	ldr	r2, [pc, #384]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001288:	4b5d      	ldr	r3, [pc, #372]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b5a      	ldr	r3, [pc, #360]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129c:	4a58      	ldr	r2, [pc, #352]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a6:	4b56      	ldr	r3, [pc, #344]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b4:	4b52      	ldr	r3, [pc, #328]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	4a51      	ldr	r2, [pc, #324]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	4a49      	ldr	r2, [pc, #292]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 80012da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e2:	4b47      	ldr	r3, [pc, #284]	@ (8001400 <MX_GPIO_Init+0x1f8>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2110      	movs	r1, #16
 80012f4:	4843      	ldr	r0, [pc, #268]	@ (8001404 <MX_GPIO_Init+0x1fc>)
 80012f6:	f000 fec7 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001300:	4841      	ldr	r0, [pc, #260]	@ (8001408 <MX_GPIO_Init+0x200>)
 8001302:	f000 fec1 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001306:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800130a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	483c      	ldr	r0, [pc, #240]	@ (800140c <MX_GPIO_Init+0x204>)
 800131c:	f000 fcec 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
 8001320:	f643 73f3 	movw	r3, #16371	@ 0x3ff3
 8001324:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4836      	ldr	r0, [pc, #216]	@ (8001410 <MX_GPIO_Init+0x208>)
 8001336:	f000 fcdf 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 PF11 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800133a:	f64c 73c0 	movw	r3, #53184	@ 0xcfc0
 800133e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4831      	ldr	r0, [pc, #196]	@ (8001414 <MX_GPIO_Init+0x20c>)
 8001350:	f000 fcd2 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001354:	f248 130f 	movw	r3, #33039	@ 0x810f
 8001358:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4826      	ldr	r0, [pc, #152]	@ (8001404 <MX_GPIO_Init+0x1fc>)
 800136a:	f000 fcc5 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800136e:	2310      	movs	r3, #16
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	481f      	ldr	r0, [pc, #124]	@ (8001404 <MX_GPIO_Init+0x1fc>)
 8001386:	f000 fcb7 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800138a:	f247 33ff 	movw	r3, #29695	@ 0x73ff
 800138e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	481a      	ldr	r0, [pc, #104]	@ (8001408 <MX_GPIO_Init+0x200>)
 80013a0:	f000 fcaa 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <MX_GPIO_Init+0x200>)
 80013be:	f000 fc9b 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4810      	ldr	r0, [pc, #64]	@ (8001418 <MX_GPIO_Init+0x210>)
 80013d8:	f000 fc8e 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG8 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80013dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	480a      	ldr	r0, [pc, #40]	@ (800141c <MX_GPIO_Init+0x214>)
 80013f2:	f000 fc81 	bl	8001cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f6:	bf00      	nop
 80013f8:	3730      	adds	r7, #48	@ 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	58024400 	.word	0x58024400
 8001404:	58020000 	.word	0x58020000
 8001408:	58020400 	.word	0x58020400
 800140c:	58021000 	.word	0x58021000
 8001410:	58020800 	.word	0x58020800
 8001414:	58021400 	.word	0x58021400
 8001418:	58020c00 	.word	0x58020c00
 800141c:	58021800 	.word	0x58021800

08001420 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001432:	f000 fbe9 	bl	8001c08 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001436:	2301      	movs	r3, #1
 8001438:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800143a:	2300      	movs	r3, #0
 800143c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001442:	231f      	movs	r3, #31
 8001444:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001446:	2387      	movs	r3, #135	@ 0x87
 8001448:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800144a:	2300      	movs	r3, #0
 800144c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800144e:	2300      	movs	r3, #0
 8001450:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001452:	2301      	movs	r3, #1
 8001454:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001456:	2301      	movs	r3, #1
 8001458:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001462:	463b      	mov	r3, r7
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fc07 	bl	8001c78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800146a:	2004      	movs	r0, #4
 800146c:	f000 fbe4 	bl	8001c38 <HAL_MPU_Enable>

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_MspInit+0x30>)
 800148c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001490:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_MspInit+0x30>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_MspInit+0x30>)
 800149c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	58024400 	.word	0x58024400

080014b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0ba      	sub	sp, #232	@ 0xe8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	22c0      	movs	r2, #192	@ 0xc0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 ff52 	bl	8007382 <memset>
  if(hi2c->Instance==I2C2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <HAL_I2C_MspInit+0xc8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d146      	bne.n	8001576 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014e8:	f04f 0208 	mov.w	r2, #8
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fbf0 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800150a:	f7ff ffb5 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <HAL_I2C_MspInit+0xcc>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001514:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <HAL_I2C_MspInit+0xcc>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_I2C_MspInit+0xcc>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800152c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001530:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001534:	2312      	movs	r3, #18
 8001536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001546:	2304      	movs	r3, #4
 8001548:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	@ (8001588 <HAL_I2C_MspInit+0xd0>)
 8001554:	f000 fbd0 	bl	8001cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_I2C_MspInit+0xcc>)
 800155a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_I2C_MspInit+0xcc>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001564:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_I2C_MspInit+0xcc>)
 800156a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800156e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001576:	bf00      	nop
 8001578:	37e8      	adds	r7, #232	@ 0xe8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40005800 	.word	0x40005800
 8001584:	58024400 	.word	0x58024400
 8001588:	58020400 	.word	0x58020400

0800158c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0ba      	sub	sp, #232	@ 0xe8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	22c0      	movs	r2, #192	@ 0xc0
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 fee8 	bl	8007382 <memset>
  if(hspi->Instance==SPI1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a26      	ldr	r2, [pc, #152]	@ (8001650 <HAL_SPI_MspInit+0xc4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d144      	bne.n	8001646 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fb87 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80015dc:	f7ff ff4c 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <HAL_SPI_MspInit+0xc8>)
 80015e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_SPI_MspInit+0xc8>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_SPI_MspInit+0xc8>)
 80015f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_SPI_MspInit+0xc8>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001604:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <HAL_SPI_MspInit+0xc8>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_SPI_MspInit+0xc8>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800161c:	23e0      	movs	r3, #224	@ 0xe0
 800161e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001634:	2305      	movs	r3, #5
 8001636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <HAL_SPI_MspInit+0xcc>)
 8001642:	f000 fb59 	bl	8001cf8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001646:	bf00      	nop
 8001648:	37e8      	adds	r7, #232	@ 0xe8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40013000 	.word	0x40013000
 8001654:	58024400 	.word	0x58024400
 8001658:	58020000 	.word	0x58020000

0800165c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0ba      	sub	sp, #232	@ 0xe8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	22c0      	movs	r2, #192	@ 0xc0
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f005 fe80 	bl	8007382 <memset>
  if(huart->Instance==USART1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a27      	ldr	r2, [pc, #156]	@ (8001724 <HAL_UART_MspInit+0xc8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d146      	bne.n	800171a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800168c:	f04f 0201 	mov.w	r2, #1
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fb1e 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016ae:	f7ff fee3 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_UART_MspInit+0xcc>)
 80016b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <HAL_UART_MspInit+0xcc>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_UART_MspInit+0xcc>)
 80016c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_UART_MspInit+0xcc>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <HAL_UART_MspInit+0xcc>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_UART_MspInit+0xcc>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001708:	2307      	movs	r3, #7
 800170a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <HAL_UART_MspInit+0xd0>)
 8001716:	f000 faef 	bl	8001cf8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800171a:	bf00      	nop
 800171c:	37e8      	adds	r7, #232	@ 0xe8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40011000 	.word	0x40011000
 8001728:	58024400 	.word	0x58024400
 800172c:	58020000 	.word	0x58020000

08001730 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0ba      	sub	sp, #232	@ 0xe8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	22c0      	movs	r2, #192	@ 0xc0
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f005 fe16 	bl	8007382 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <HAL_PCD_MspInit+0xcc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d149      	bne.n	80017f4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001760:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800176c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fab3 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001784:	f7ff fe78 	bl	8001478 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001788:	f001 fab6 	bl	8002cf8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <HAL_PCD_MspInit+0xd0>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001792:	4a1b      	ldr	r2, [pc, #108]	@ (8001800 <HAL_PCD_MspInit+0xd0>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <HAL_PCD_MspInit+0xd0>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017c4:	230a      	movs	r3, #10
 80017c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	@ (8001804 <HAL_PCD_MspInit+0xd4>)
 80017d2:	f000 fa91 	bl	8001cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_PCD_MspInit+0xd0>)
 80017d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017dc:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <HAL_PCD_MspInit+0xd0>)
 80017de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_PCD_MspInit+0xd0>)
 80017e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80017f4:	bf00      	nop
 80017f6:	37e8      	adds	r7, #232	@ 0xe8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40080000 	.word	0x40080000
 8001800:	58024400 	.word	0x58024400
 8001804:	58020000 	.word	0x58020000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <NMI_Handler+0x4>

08001810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <MemManage_Handler+0x4>

08001820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <UsageFault_Handler+0x4>

08001830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185e:	f000 f89f 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800186c:	f7fe feac 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	@ (80018a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	@ (80018b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f005 fd7d 	bl	8007394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7ff fa47 	bl	8000d2c <main>
  bx  lr
 800189e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018a8:	2400019c 	.word	0x2400019c
  ldr r2, =_sidata
 80018ac:	08007cc4 	.word	0x08007cc4
  ldr r2, =_sbss
 80018b0:	2400019c 	.word	0x2400019c
  ldr r4, =_ebss
 80018b4:	24000810 	.word	0x24000810

080018b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC3_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c2:	2003      	movs	r0, #3
 80018c4:	f000 f96e 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018c8:	f002 f836 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_Init+0x68>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	4913      	ldr	r1, [pc, #76]	@ (8001928 <HAL_Init+0x6c>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <HAL_Init+0x68>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001928 <HAL_Init+0x6c>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	4a0b      	ldr	r2, [pc, #44]	@ (800192c <HAL_Init+0x70>)
 80018fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001900:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <HAL_Init+0x74>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001906:	200f      	movs	r0, #15
 8001908:	f000 f814 	bl	8001934 <HAL_InitTick>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e002      	b.n	800191c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001916:	f7ff fdb5 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	58024400 	.word	0x58024400
 8001928:	080073f4 	.word	0x080073f4
 800192c:	24000004 	.word	0x24000004
 8001930:	24000000 	.word	0x24000000

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800193c:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_InitTick+0x60>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e021      	b.n	800198c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_InitTick+0x64>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_InitTick+0x60>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f945 	bl	8001bee <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800197c:	f000 f91d 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	@ (800199c <HAL_InitTick+0x68>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	24000198 	.word	0x24000198
 8001998:	24000000 	.word	0x24000000
 800199c:	24000194 	.word	0x24000194

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	24000198 	.word	0x24000198
 80019c4:	2400080c 	.word	0x2400080c

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	2400080c 	.word	0x2400080c

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	24000198 	.word	0x24000198

08001a28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_GetREVID+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0c1b      	lsrs	r3, r3, #16
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	5c001000 	.word	0x5c001000

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x40>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x40>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00
 8001a84:	05fa0000 	.word	0x05fa0000

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	@ (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	@ (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff47 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff5e 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff90 	bl	8001af8 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5f 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffb2 	bl	8001b60 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c0c:	f3bf 8f5f 	dmb	sy
}
 8001c10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <HAL_MPU_Disable+0x28>)
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <HAL_MPU_Disable+0x28>)
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c1c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_MPU_Disable+0x2c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	e000ed90 	.word	0xe000ed90

08001c38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c40:	4a0b      	ldr	r2, [pc, #44]	@ (8001c70 <HAL_MPU_Enable+0x38>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_MPU_Enable+0x3c>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	4a09      	ldr	r2, [pc, #36]	@ (8001c74 <HAL_MPU_Enable+0x3c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c56:	f3bf 8f4f 	dsb	sy
}
 8001c5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c5c:	f3bf 8f6f 	isb	sy
}
 8001c60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed90 	.word	0xe000ed90
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	785a      	ldrb	r2, [r3, #1]
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_MPU_ConfigRegion+0x7c>)
 8001c86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_MPU_ConfigRegion+0x7c>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_MPU_ConfigRegion+0x7c>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001c94:	4a17      	ldr	r2, [pc, #92]	@ (8001cf4 <HAL_MPU_ConfigRegion+0x7c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7b1b      	ldrb	r3, [r3, #12]
 8001ca0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7adb      	ldrb	r3, [r3, #11]
 8001ca6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ca8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7a9b      	ldrb	r3, [r3, #10]
 8001cae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7b5b      	ldrb	r3, [r3, #13]
 8001cb6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7b9b      	ldrb	r3, [r3, #14]
 8001cbe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7bdb      	ldrb	r3, [r3, #15]
 8001cc6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7a5b      	ldrb	r3, [r3, #9]
 8001cce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7a1b      	ldrb	r3, [r3, #8]
 8001cd6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cd8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ce2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ce4:	6113      	str	r3, [r2, #16]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed90 	.word	0xe000ed90

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d06:	4b89      	ldr	r3, [pc, #548]	@ (8001f2c <HAL_GPIO_Init+0x234>)
 8001d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d0a:	e194      	b.n	8002036 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8186 	beq.w	8002030 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d005      	beq.n	8001d3c <HAL_GPIO_Init+0x44>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d123      	bne.n	8001e2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	69b9      	ldr	r1, [r7, #24]
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0203 	and.w	r2, r3, #3
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80e0 	beq.w	8002030 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <HAL_GPIO_Init+0x238>)
 8001e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e76:	4a2e      	ldr	r2, [pc, #184]	@ (8001f30 <HAL_GPIO_Init+0x238>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e80:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <HAL_GPIO_Init+0x238>)
 8001e82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8e:	4a29      	ldr	r2, [pc, #164]	@ (8001f34 <HAL_GPIO_Init+0x23c>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	@ (8001f38 <HAL_GPIO_Init+0x240>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d052      	beq.n	8001f60 <HAL_GPIO_Init+0x268>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <HAL_GPIO_Init+0x244>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_GPIO_Init+0x22e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f40 <HAL_GPIO_Init+0x248>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x22a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f44 <HAL_GPIO_Init+0x24c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x226>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f48 <HAL_GPIO_Init+0x250>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x222>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f4c <HAL_GPIO_Init+0x254>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x21e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f50 <HAL_GPIO_Init+0x258>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x21a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a19      	ldr	r2, [pc, #100]	@ (8001f54 <HAL_GPIO_Init+0x25c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x216>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <HAL_GPIO_Init+0x260>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x212>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a17      	ldr	r2, [pc, #92]	@ (8001f5c <HAL_GPIO_Init+0x264>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x20e>
 8001f02:	2309      	movs	r3, #9
 8001f04:	e02d      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f06:	230a      	movs	r3, #10
 8001f08:	e02b      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	e029      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e027      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e025      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e023      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e021      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e01f      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e01d      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e01b      	b.n	8001f62 <HAL_GPIO_Init+0x26a>
 8001f2a:	bf00      	nop
 8001f2c:	58000080 	.word	0x58000080
 8001f30:	58024400 	.word	0x58024400
 8001f34:	58000400 	.word	0x58000400
 8001f38:	58020000 	.word	0x58020000
 8001f3c:	58020400 	.word	0x58020400
 8001f40:	58020800 	.word	0x58020800
 8001f44:	58020c00 	.word	0x58020c00
 8001f48:	58021000 	.word	0x58021000
 8001f4c:	58021400 	.word	0x58021400
 8001f50:	58021800 	.word	0x58021800
 8001f54:	58021c00 	.word	0x58021c00
 8001f58:	58022000 	.word	0x58022000
 8001f5c:	58022400 	.word	0x58022400
 8001f60:	2300      	movs	r3, #0
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	f002 0203 	and.w	r2, r2, #3
 8001f68:	0092      	lsls	r2, r2, #2
 8001f6a:	4093      	lsls	r3, r2
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f72:	4938      	ldr	r1, [pc, #224]	@ (8002054 <HAL_GPIO_Init+0x35c>)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3301      	adds	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	f47f ae63 	bne.w	8001d0c <HAL_GPIO_Init+0x14>
  }
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	@ 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	58000400 	.word	0x58000400

08002058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	887b      	ldrh	r3, [r7, #2]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e001      	b.n	800207a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
 8002094:	4613      	mov	r3, r2
 8002096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002098:	787b      	ldrb	r3, [r7, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020a4:	e003      	b.n	80020ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020a6:	887b      	ldrh	r3, [r7, #2]
 80020a8:	041a      	lsls	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	619a      	str	r2, [r3, #24]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80020c4:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <HAL_HSEM_FastTake+0x2c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3320      	adds	r3, #32
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <HAL_HSEM_FastTake+0x30>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	58026400 	.word	0x58026400
 80020ec:	80000300 	.word	0x80000300

080020f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80020fa:	4906      	ldr	r1, [pc, #24]	@ (8002114 <HAL_HSEM_Release+0x24>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	58026400 	.word	0x58026400

08002118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e08b      	b.n	8002242 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff f9ba 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	@ 0x24
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002168:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002178:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	e006      	b.n	80021a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800219e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d108      	bne.n	80021ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	e007      	b.n	80021ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <HAL_I2C_Init+0x134>)
 80021d6:	430b      	orrs	r3, r1
 80021d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69d9      	ldr	r1, [r3, #28]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1a      	ldr	r2, [r3, #32]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	02008000 	.word	0x02008000

08002250 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	461a      	mov	r2, r3
 800225c:	460b      	mov	r3, r1
 800225e:	817b      	strh	r3, [r7, #10]
 8002260:	4613      	mov	r3, r2
 8002262:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b20      	cmp	r3, #32
 800226e:	f040 80fd 	bne.w	800246c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_I2C_Master_Transmit+0x30>
 800227c:	2302      	movs	r3, #2
 800227e:	e0f6      	b.n	800246e <HAL_I2C_Master_Transmit+0x21e>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002288:	f7ff fb9e 	bl	80019c8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2319      	movs	r3, #25
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f914 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0e1      	b.n	800246e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2221      	movs	r2, #33	@ 0x21
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2210      	movs	r2, #16
 80022b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	893a      	ldrh	r2, [r7, #8]
 80022ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2bff      	cmp	r3, #255	@ 0xff
 80022da:	d906      	bls.n	80022ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	22ff      	movs	r2, #255	@ 0xff
 80022e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80022e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e007      	b.n	80022fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80022f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d024      	beq.n	800234c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	8979      	ldrh	r1, [r7, #10]
 800233e:	4b4e      	ldr	r3, [pc, #312]	@ (8002478 <HAL_I2C_Master_Transmit+0x228>)
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fa83 	bl	8002850 <I2C_TransferConfig>
 800234a:	e066      	b.n	800241a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002350:	b2da      	uxtb	r2, r3
 8002352:	8979      	ldrh	r1, [r7, #10]
 8002354:	4b48      	ldr	r3, [pc, #288]	@ (8002478 <HAL_I2C_Master_Transmit+0x228>)
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fa78 	bl	8002850 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002360:	e05b      	b.n	800241a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	6a39      	ldr	r1, [r7, #32]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 f907 	bl	800257a <I2C_WaitOnTXISFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07b      	b.n	800246e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d034      	beq.n	800241a <HAL_I2C_Master_Transmit+0x1ca>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d130      	bne.n	800241a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	2200      	movs	r2, #0
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f880 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e04d      	b.n	800246e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2bff      	cmp	r3, #255	@ 0xff
 80023da:	d90e      	bls.n	80023fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	22ff      	movs	r2, #255	@ 0xff
 80023e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa2c 	bl	8002850 <I2C_TransferConfig>
 80023f8:	e00f      	b.n	800241a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fa1b 	bl	8002850 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d19e      	bne.n	8002362 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	6a39      	ldr	r1, [r7, #32]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f8ed 	bl	8002608 <I2C_WaitOnSTOPFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e01a      	b.n	800246e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_I2C_Master_Transmit+0x22c>)
 800244c:	400b      	ands	r3, r1
 800244e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	80002000 	.word	0x80002000
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d103      	bne.n	800249e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	619a      	str	r2, [r3, #24]
  }
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d8:	e03b      	b.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f8d6 	bl	8002690 <I2C_IsErrorOccurred>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e041      	b.n	8002572 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024f4:	d02d      	beq.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f6:	f7ff fa67 	bl	80019c8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d122      	bne.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4013      	ands	r3, r2
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	429a      	cmp	r2, r3
 8002528:	d113      	bne.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4013      	ands	r3, r2
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	429a      	cmp	r2, r3
 800256e:	d0b4      	beq.n	80024da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002586:	e033      	b.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f87f 	bl	8002690 <I2C_IsErrorOccurred>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e031      	b.n	8002600 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025a2:	d025      	beq.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a4:	f7ff fa10 	bl	80019c8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d302      	bcc.n	80025ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11a      	bne.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d013      	beq.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e007      	b.n	8002600 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d1c4      	bne.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002614:	e02f      	b.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f838 	bl	8002690 <I2C_IsErrorOccurred>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e02d      	b.n	8002686 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff f9cd 	bl	80019c8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11a      	bne.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b20      	cmp	r3, #32
 800264c:	d013      	beq.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f043 0220 	orr.w	r2, r3, #32
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b20      	cmp	r3, #32
 8002682:	d1c8      	bne.n	8002616 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d068      	beq.n	800278e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026c4:	e049      	b.n	800275a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026cc:	d045      	beq.n	800275a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7ff f97b 	bl	80019c8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_IsErrorOccurred+0x54>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13a      	bne.n	800275a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002706:	d121      	bne.n	800274c <I2C_IsErrorOccurred+0xbc>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800270e:	d01d      	beq.n	800274c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d01a      	beq.n	800274c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002724:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002726:	f7ff f94f 	bl	80019c8 <HAL_GetTick>
 800272a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	e00e      	b.n	800274c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800272e:	f7ff f94b 	bl	80019c8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b19      	cmp	r3, #25
 800273a:	d907      	bls.n	800274c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800274a:	e006      	b.n	800275a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b20      	cmp	r3, #32
 8002758:	d1e9      	bne.n	800272e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b20      	cmp	r3, #32
 8002766:	d003      	beq.n	8002770 <I2C_IsErrorOccurred+0xe0>
 8002768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0aa      	beq.n	80026c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80027fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01c      	beq.n	800283e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff fe3b 	bl	8002480 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <I2C_IsErrorOccurred+0x1bc>)
 8002816:	400b      	ands	r3, r1
 8002818:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800283e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002842:	4618      	mov	r0, r3
 8002844:	3728      	adds	r7, #40	@ 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	fe00e800 	.word	0xfe00e800

08002850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	4613      	mov	r3, r2
 8002860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002868:	7a7b      	ldrb	r3, [r7, #9]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002870:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	4313      	orrs	r3, r2
 800287a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800287e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	0d5b      	lsrs	r3, r3, #21
 800288a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <I2C_TransferConfig+0x60>)
 8002890:	430b      	orrs	r3, r1
 8002892:	43db      	mvns	r3, r3
 8002894:	ea02 0103 	and.w	r1, r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	03ff63ff 	.word	0x03ff63ff

080028b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d138      	bne.n	800293c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e032      	b.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	@ 0x24
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	d139      	bne.n	80029d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800296a:	2302      	movs	r3, #2
 800296c:	e033      	b.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	@ 0x24
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800299c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af02      	add	r7, sp, #8
 80029e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0fe      	b.n	8002bf2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fe fe91 	bl	8001730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2203      	movs	r2, #3
 8002a12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fa1c 	bl	8006e58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7c1a      	ldrb	r2, [r3, #16]
 8002a28:	f88d 2000 	strb.w	r2, [sp]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a30:	f004 f9a0 	bl	8006d74 <USB_CoreInit>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0d5      	b.n	8002bf2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 fa14 	bl	8006e7a <USB_SetCurrentMode>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0c6      	b.n	8002bf2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e04a      	b.n	8002b00 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3315      	adds	r3, #21
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	b298      	uxth	r0, r3
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	332e      	adds	r3, #46	@ 0x2e
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3318      	adds	r3, #24
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	331c      	adds	r3, #28
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	3324      	adds	r3, #36	@ 0x24
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	3301      	adds	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	791b      	ldrb	r3, [r3, #4]
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3af      	bcc.n	8002a6a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	e044      	b.n	8002b9a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	3301      	adds	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	791b      	ldrb	r3, [r3, #4]
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3b5      	bcc.n	8002b10 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7c1a      	ldrb	r2, [r3, #16]
 8002bac:	f88d 2000 	strb.w	r2, [sp]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb4:	f004 f9ae 	bl	8006f14 <USB_DevInit>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e013      	b.n	8002bf2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7b1b      	ldrb	r3, [r3, #12]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f80b 	bl	8002bfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fb69 	bl	80072c2 <USB_DevDisconnect>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	10000003 	.word	0x10000003

08002c44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c4c:	4b29      	ldr	r3, [pc, #164]	@ (8002cf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d00a      	beq.n	8002c6e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c58:	4b26      	ldr	r3, [pc, #152]	@ (8002cf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e040      	b.n	8002cec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e03e      	b.n	8002cec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002c76:	491f      	ldr	r1, [pc, #124]	@ (8002cf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c7e:	f7fe fea3 	bl	80019c8 <HAL_GetTick>
 8002c82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c84:	e009      	b.n	8002c9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c86:	f7fe fe9f 	bl	80019c8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c94:	d901      	bls.n	8002c9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e028      	b.n	8002cec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c9a:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca6:	d1ee      	bne.n	8002c86 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b1e      	cmp	r3, #30
 8002cac:	d008      	beq.n	8002cc0 <HAL_PWREx_ConfigSupply+0x7c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cb2:	d005      	beq.n	8002cc0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b1d      	cmp	r3, #29
 8002cb8:	d002      	beq.n	8002cc0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b2d      	cmp	r3, #45	@ 0x2d
 8002cbe:	d114      	bne.n	8002cea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002cc0:	f7fe fe82 	bl	80019c8 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cc6:	e009      	b.n	8002cdc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cc8:	f7fe fe7e 	bl	80019c8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cd6:	d901      	bls.n	8002cdc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e007      	b.n	8002cec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce8:	d1ee      	bne.n	8002cc8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	58024800 	.word	0x58024800

08002cf8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	58024800 	.word	0x58024800

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08c      	sub	sp, #48	@ 0x30
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f000 bc48 	b.w	80035bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8088 	beq.w	8002e4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3a:	4b99      	ldr	r3, [pc, #612]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d44:	4b96      	ldr	r3, [pc, #600]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d007      	beq.n	8002d60 <HAL_RCC_OscConfig+0x48>
 8002d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d52:	2b18      	cmp	r3, #24
 8002d54:	d111      	bne.n	8002d7a <HAL_RCC_OscConfig+0x62>
 8002d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d06d      	beq.n	8002e48 <HAL_RCC_OscConfig+0x130>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d169      	bne.n	8002e48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f000 bc21 	b.w	80035bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x7a>
 8002d84:	4b86      	ldr	r3, [pc, #536]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a85      	ldr	r2, [pc, #532]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e02e      	b.n	8002df0 <HAL_RCC_OscConfig+0xd8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x9c>
 8002d9a:	4b81      	ldr	r3, [pc, #516]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a80      	ldr	r2, [pc, #512]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e01d      	b.n	8002df0 <HAL_RCC_OscConfig+0xd8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xc0>
 8002dbe:	4b78      	ldr	r3, [pc, #480]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a77      	ldr	r2, [pc, #476]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b75      	ldr	r3, [pc, #468]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a74      	ldr	r2, [pc, #464]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0xd8>
 8002dd8:	4b71      	ldr	r3, [pc, #452]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a70      	ldr	r2, [pc, #448]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b6e      	ldr	r3, [pc, #440]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6d      	ldr	r2, [pc, #436]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe fde6 	bl	80019c8 <HAL_GetTick>
 8002dfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e00:	f7fe fde2 	bl	80019c8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	@ 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e3d4      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e12:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe8>
 8002e1e:	e014      	b.n	8002e4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fdd2 	bl	80019c8 <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe fdce 	bl	80019c8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	@ 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e3c0      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e3a:	4b59      	ldr	r3, [pc, #356]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x110>
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80ca 	beq.w	8002fec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e58:	4b51      	ldr	r3, [pc, #324]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e62:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCC_OscConfig+0x166>
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2b18      	cmp	r3, #24
 8002e72:	d156      	bne.n	8002f22 <HAL_RCC_OscConfig+0x20a>
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d151      	bne.n	8002f22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e7e:	4b48      	ldr	r3, [pc, #288]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x17e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e392      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e96:	4b42      	ldr	r3, [pc, #264]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0219 	bic.w	r2, r3, #25
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	493f      	ldr	r1, [pc, #252]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fd8e 	bl	80019c8 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fd8a 	bl	80019c8 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e37c      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec2:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	f7fe fdab 	bl	8001a28 <HAL_GetREVID>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d817      	bhi.n	8002f0c <HAL_RCC_OscConfig+0x1f4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b40      	cmp	r3, #64	@ 0x40
 8002ee2:	d108      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002eec:	4a2c      	ldr	r2, [pc, #176]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	e07a      	b.n	8002fec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	031b      	lsls	r3, r3, #12
 8002f04:	4926      	ldr	r1, [pc, #152]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f0a:	e06f      	b.n	8002fec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b24      	ldr	r3, [pc, #144]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	4921      	ldr	r1, [pc, #132]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f20:	e064      	b.n	8002fec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d047      	beq.n	8002fba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0219 	bic.w	r2, r3, #25
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	491a      	ldr	r1, [pc, #104]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fd44 	bl	80019c8 <HAL_GetTick>
 8002f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f44:	f7fe fd40 	bl	80019c8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e332      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	f7fe fd61 	bl	8001a28 <HAL_GetREVID>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d819      	bhi.n	8002fa4 <HAL_RCC_OscConfig+0x28c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b40      	cmp	r3, #64	@ 0x40
 8002f76:	d108      	bne.n	8002f8a <HAL_RCC_OscConfig+0x272>
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f80:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f86:	6053      	str	r3, [r2, #4]
 8002f88:	e030      	b.n	8002fec <HAL_RCC_OscConfig+0x2d4>
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	031b      	lsls	r3, r3, #12
 8002f98:	4901      	ldr	r1, [pc, #4]	@ (8002fa0 <HAL_RCC_OscConfig+0x288>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	e025      	b.n	8002fec <HAL_RCC_OscConfig+0x2d4>
 8002fa0:	58024400 	.word	0x58024400
 8002fa4:	4b9a      	ldr	r3, [pc, #616]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	4997      	ldr	r1, [pc, #604]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
 8002fb8:	e018      	b.n	8002fec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fba:	4b95      	ldr	r3, [pc, #596]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a94      	ldr	r2, [pc, #592]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fcff 	bl	80019c8 <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fe fcfb 	bl	80019c8 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e2ed      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fe0:	4b8b      	ldr	r3, [pc, #556]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a9 	beq.w	800314c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffa:	4b85      	ldr	r3, [pc, #532]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003002:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003004:	4b82      	ldr	r3, [pc, #520]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d007      	beq.n	8003020 <HAL_RCC_OscConfig+0x308>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b18      	cmp	r3, #24
 8003014:	d13a      	bne.n	800308c <HAL_RCC_OscConfig+0x374>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d135      	bne.n	800308c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003020:	4b7b      	ldr	r3, [pc, #492]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_OscConfig+0x320>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b80      	cmp	r3, #128	@ 0x80
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e2c1      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003038:	f7fe fcf6 	bl	8001a28 <HAL_GetREVID>
 800303c:	4603      	mov	r3, r0
 800303e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003042:	4293      	cmp	r3, r2
 8003044:	d817      	bhi.n	8003076 <HAL_RCC_OscConfig+0x35e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	2b20      	cmp	r3, #32
 800304c:	d108      	bne.n	8003060 <HAL_RCC_OscConfig+0x348>
 800304e:	4b70      	ldr	r3, [pc, #448]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003056:	4a6e      	ldr	r2, [pc, #440]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003058:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800305c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800305e:	e075      	b.n	800314c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003060:	4b6b      	ldr	r3, [pc, #428]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	069b      	lsls	r3, r3, #26
 800306e:	4968      	ldr	r1, [pc, #416]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003074:	e06a      	b.n	800314c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003076:	4b66      	ldr	r3, [pc, #408]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	061b      	lsls	r3, r3, #24
 8003084:	4962      	ldr	r1, [pc, #392]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800308a:	e05f      	b.n	800314c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d042      	beq.n	800311a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003094:	4b5e      	ldr	r3, [pc, #376]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a5d      	ldr	r2, [pc, #372]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 800309a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800309e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe fc92 	bl	80019c8 <HAL_GetTick>
 80030a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030a8:	f7fe fc8e 	bl	80019c8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e280      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030ba:	4b55      	ldr	r3, [pc, #340]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030c6:	f7fe fcaf 	bl	8001a28 <HAL_GetREVID>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d817      	bhi.n	8003104 <HAL_RCC_OscConfig+0x3ec>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d108      	bne.n	80030ee <HAL_RCC_OscConfig+0x3d6>
 80030dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80030e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 80030e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030ea:	6053      	str	r3, [r2, #4]
 80030ec:	e02e      	b.n	800314c <HAL_RCC_OscConfig+0x434>
 80030ee:	4b48      	ldr	r3, [pc, #288]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	069b      	lsls	r3, r3, #26
 80030fc:	4944      	ldr	r1, [pc, #272]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
 8003102:	e023      	b.n	800314c <HAL_RCC_OscConfig+0x434>
 8003104:	4b42      	ldr	r3, [pc, #264]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	493f      	ldr	r1, [pc, #252]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	60cb      	str	r3, [r1, #12]
 8003118:	e018      	b.n	800314c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800311a:	4b3d      	ldr	r3, [pc, #244]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3c      	ldr	r2, [pc, #240]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe fc4f 	bl	80019c8 <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800312e:	f7fe fc4b 	bl	80019c8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e23d      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003140:	4b33      	ldr	r3, [pc, #204]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d036      	beq.n	80031c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d019      	beq.n	8003194 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003160:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003164:	4a2a      	ldr	r2, [pc, #168]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fe fc2c 	bl	80019c8 <HAL_GetTick>
 8003170:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003174:	f7fe fc28 	bl	80019c8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e21a      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003186:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x45c>
 8003192:	e018      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003194:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003198:	4a1d      	ldr	r2, [pc, #116]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe fc12 	bl	80019c8 <HAL_GetTick>
 80031a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a8:	f7fe fc0e 	bl	80019c8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e200      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d039      	beq.n	8003246 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01c      	beq.n	8003214 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031da:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a0c      	ldr	r2, [pc, #48]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031e6:	f7fe fbef 	bl	80019c8 <HAL_GetTick>
 80031ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ee:	f7fe fbeb 	bl	80019c8 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e1dd      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003200:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x4d6>
 800320c:	e01b      	b.n	8003246 <HAL_RCC_OscConfig+0x52e>
 800320e:	bf00      	nop
 8003210:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003214:	4b9b      	ldr	r3, [pc, #620]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a9a      	ldr	r2, [pc, #616]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800321a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800321e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003220:	f7fe fbd2 	bl	80019c8 <HAL_GetTick>
 8003224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003228:	f7fe fbce 	bl	80019c8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1c0      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800323a:	4b92      	ldr	r3, [pc, #584]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8081 	beq.w	8003356 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003254:	4b8c      	ldr	r3, [pc, #560]	@ (8003488 <HAL_RCC_OscConfig+0x770>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a8b      	ldr	r2, [pc, #556]	@ (8003488 <HAL_RCC_OscConfig+0x770>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003260:	f7fe fbb2 	bl	80019c8 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fe fbae 	bl	80019c8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1a0      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800327a:	4b83      	ldr	r3, [pc, #524]	@ (8003488 <HAL_RCC_OscConfig+0x770>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <HAL_RCC_OscConfig+0x584>
 800328e:	4b7d      	ldr	r3, [pc, #500]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	4a7c      	ldr	r2, [pc, #496]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	@ 0x70
 800329a:	e02d      	b.n	80032f8 <HAL_RCC_OscConfig+0x5e0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x5a6>
 80032a4:	4b77      	ldr	r3, [pc, #476]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a8:	4a76      	ldr	r2, [pc, #472]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b0:	4b74      	ldr	r3, [pc, #464]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	4a73      	ldr	r2, [pc, #460]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x5e0>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c8>
 80032c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0x5e0>
 80032e0:	4b68      	ldr	r3, [pc, #416]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	4a67      	ldr	r2, [pc, #412]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ec:	4b65      	ldr	r3, [pc, #404]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a64      	ldr	r2, [pc, #400]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80032f2:	f023 0304 	bic.w	r3, r3, #4
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe fb62 	bl	80019c8 <HAL_GetTick>
 8003304:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003306:	e00a      	b.n	800331e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fe fb5e 	bl	80019c8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e14e      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800331e:	4b59      	ldr	r3, [pc, #356]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ee      	beq.n	8003308 <HAL_RCC_OscConfig+0x5f0>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe fb4c 	bl	80019c8 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fe fb48 	bl	80019c8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e138      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800334a:	4b4e      	ldr	r3, [pc, #312]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ee      	bne.n	8003334 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 812d 	beq.w	80035ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003360:	4b48      	ldr	r3, [pc, #288]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003368:	2b18      	cmp	r3, #24
 800336a:	f000 80bd 	beq.w	80034e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	2b02      	cmp	r3, #2
 8003374:	f040 809e 	bne.w	80034b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003378:	4b42      	ldr	r3, [pc, #264]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a41      	ldr	r2, [pc, #260]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800337e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe fb20 	bl	80019c8 <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338c:	f7fe fb1c 	bl	80019c8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e10e      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800339e:	4b39      	ldr	r3, [pc, #228]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033aa:	4b36      	ldr	r3, [pc, #216]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80033ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ae:	4b37      	ldr	r3, [pc, #220]	@ (800348c <HAL_RCC_OscConfig+0x774>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	430a      	orrs	r2, r1
 80033be:	4931      	ldr	r1, [pc, #196]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	3b01      	subs	r3, #1
 80033ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	3b01      	subs	r3, #1
 80033d4:	025b      	lsls	r3, r3, #9
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033de:	3b01      	subs	r3, #1
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ec:	3b01      	subs	r3, #1
 80033ee:	061b      	lsls	r3, r3, #24
 80033f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80033f4:	4923      	ldr	r1, [pc, #140]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80033fa:	4b22      	ldr	r3, [pc, #136]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	4a21      	ldr	r2, [pc, #132]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003406:	4b1f      	ldr	r3, [pc, #124]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340a:	4b21      	ldr	r3, [pc, #132]	@ (8003490 <HAL_RCC_OscConfig+0x778>)
 800340c:	4013      	ands	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003412:	00d2      	lsls	r2, r2, #3
 8003414:	491b      	ldr	r1, [pc, #108]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800341a:	4b1a      	ldr	r3, [pc, #104]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800341c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341e:	f023 020c 	bic.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	4917      	ldr	r1, [pc, #92]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800342c:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	f023 0202 	bic.w	r2, r3, #2
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	4912      	ldr	r1, [pc, #72]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800343a:	4313      	orrs	r3, r2
 800343c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800343e:	4b11      	ldr	r3, [pc, #68]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	4a10      	ldr	r2, [pc, #64]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344a:	4b0e      	ldr	r3, [pc, #56]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	4a0d      	ldr	r2, [pc, #52]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003456:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345a:	4a0a      	ldr	r2, [pc, #40]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003462:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	4a07      	ldr	r2, [pc, #28]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346e:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <HAL_RCC_OscConfig+0x76c>)
 8003474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fe faa5 	bl	80019c8 <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003480:	e011      	b.n	80034a6 <HAL_RCC_OscConfig+0x78e>
 8003482:	bf00      	nop
 8003484:	58024400 	.word	0x58024400
 8003488:	58024800 	.word	0x58024800
 800348c:	fffffc0c 	.word	0xfffffc0c
 8003490:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fa98 	bl	80019c8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e08a      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034a6:	4b47      	ldr	r3, [pc, #284]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x77c>
 80034b2:	e082      	b.n	80035ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b4:	4b43      	ldr	r3, [pc, #268]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a42      	ldr	r2, [pc, #264]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80034ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fa82 	bl	80019c8 <HAL_GetTick>
 80034c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fa7e 	bl	80019c8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e070      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034da:	4b3a      	ldr	r3, [pc, #232]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x7b0>
 80034e6:	e068      	b.n	80035ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034e8:	4b36      	ldr	r3, [pc, #216]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034ee:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d031      	beq.n	8003560 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d12a      	bne.n	8003560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d122      	bne.n	8003560 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d11a      	bne.n	8003560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0a5b      	lsrs	r3, r3, #9
 800352e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003536:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d111      	bne.n	8003560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	0c1b      	lsrs	r3, r3, #16
 8003540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d108      	bne.n	8003560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	0e1b      	lsrs	r3, r3, #24
 8003552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e02b      	b.n	80035bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 8003566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800356e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	429a      	cmp	r2, r3
 8003578:	d01f      	beq.n	80035ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800357a:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	4a11      	ldr	r2, [pc, #68]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003586:	f7fe fa1f 	bl	80019c8 <HAL_GetTick>
 800358a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800358c:	bf00      	nop
 800358e:	f7fe fa1b 	bl	80019c8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	4293      	cmp	r3, r2
 8003598:	d0f9      	beq.n	800358e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800359a:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 800359c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <HAL_RCC_OscConfig+0x8b0>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035a6:	00d2      	lsls	r2, r2, #3
 80035a8:	4906      	ldr	r1, [pc, #24]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	4a04      	ldr	r2, [pc, #16]	@ (80035c4 <HAL_RCC_OscConfig+0x8ac>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3730      	adds	r7, #48	@ 0x30
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	58024400 	.word	0x58024400
 80035c8:	ffff0007 	.word	0xffff0007

080035cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e19c      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b8a      	ldr	r3, [pc, #552]	@ (800380c <HAL_RCC_ClockConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d910      	bls.n	8003610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b87      	ldr	r3, [pc, #540]	@ (800380c <HAL_RCC_ClockConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 020f 	bic.w	r2, r3, #15
 80035f6:	4985      	ldr	r1, [pc, #532]	@ (800380c <HAL_RCC_ClockConfig+0x240>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b83      	ldr	r3, [pc, #524]	@ (800380c <HAL_RCC_ClockConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e184      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	4b7b      	ldr	r3, [pc, #492]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003628:	429a      	cmp	r2, r3
 800362a:	d908      	bls.n	800363e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800362c:	4b78      	ldr	r3, [pc, #480]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	4975      	ldr	r1, [pc, #468]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800363a:	4313      	orrs	r3, r2
 800363c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	4b70      	ldr	r3, [pc, #448]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003656:	429a      	cmp	r2, r3
 8003658:	d908      	bls.n	800366c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800365a:	4b6d      	ldr	r3, [pc, #436]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	496a      	ldr	r1, [pc, #424]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003668:	4313      	orrs	r3, r2
 800366a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d010      	beq.n	800369a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	4b64      	ldr	r3, [pc, #400]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003684:	429a      	cmp	r2, r3
 8003686:	d908      	bls.n	800369a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003688:	4b61      	ldr	r3, [pc, #388]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	495e      	ldr	r1, [pc, #376]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003696:	4313      	orrs	r3, r2
 8003698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	4b59      	ldr	r3, [pc, #356]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d908      	bls.n	80036c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036b6:	4b56      	ldr	r3, [pc, #344]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	4953      	ldr	r1, [pc, #332]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d908      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f023 020f 	bic.w	r2, r3, #15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4947      	ldr	r1, [pc, #284]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d055      	beq.n	80037ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003702:	4b43      	ldr	r3, [pc, #268]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4940      	ldr	r1, [pc, #256]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003710:	4313      	orrs	r3, r2
 8003712:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d107      	bne.n	800372c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800371c:	4b3c      	ldr	r3, [pc, #240]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d121      	bne.n	800376c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0f6      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d107      	bne.n	8003744 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003734:	4b36      	ldr	r3, [pc, #216]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d115      	bne.n	800376c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0ea      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800374c:	4b30      	ldr	r3, [pc, #192]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0de      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800375c:	4b2c      	ldr	r3, [pc, #176]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0d6      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800376c:	4b28      	ldr	r3, [pc, #160]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f023 0207 	bic.w	r2, r3, #7
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4925      	ldr	r1, [pc, #148]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377e:	f7fe f923 	bl	80019c8 <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003784:	e00a      	b.n	800379c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003786:	f7fe f91f 	bl	80019c8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0be      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379c:	4b1c      	ldr	r3, [pc, #112]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d1eb      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d208      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ca:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f023 020f 	bic.w	r2, r3, #15
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	490e      	ldr	r1, [pc, #56]	@ (8003810 <HAL_RCC_ClockConfig+0x244>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_ClockConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d214      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b08      	ldr	r3, [pc, #32]	@ (800380c <HAL_RCC_ClockConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 020f 	bic.w	r2, r3, #15
 80037f2:	4906      	ldr	r1, [pc, #24]	@ (800380c <HAL_RCC_ClockConfig+0x240>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b04      	ldr	r3, [pc, #16]	@ (800380c <HAL_RCC_ClockConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e086      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
 800380c:	52002000 	.word	0x52002000
 8003810:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d010      	beq.n	8003842 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	4b3f      	ldr	r3, [pc, #252]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800382c:	429a      	cmp	r2, r3
 800382e:	d208      	bcs.n	8003842 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003830:	4b3c      	ldr	r3, [pc, #240]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	4939      	ldr	r1, [pc, #228]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 800383e:	4313      	orrs	r3, r2
 8003840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d010      	beq.n	8003870 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	4b34      	ldr	r3, [pc, #208]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800385a:	429a      	cmp	r2, r3
 800385c:	d208      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800385e:	4b31      	ldr	r3, [pc, #196]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	492e      	ldr	r1, [pc, #184]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 800386c:	4313      	orrs	r3, r2
 800386e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d010      	beq.n	800389e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	4b28      	ldr	r3, [pc, #160]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003888:	429a      	cmp	r2, r3
 800388a:	d208      	bcs.n	800389e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800388c:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	4922      	ldr	r1, [pc, #136]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 800389a:	4313      	orrs	r3, r2
 800389c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d010      	beq.n	80038cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d208      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4917      	ldr	r1, [pc, #92]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038cc:	f000 f834 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	4912      	ldr	r1, [pc, #72]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038f4:	5cd3      	ldrb	r3, [r2, r3]
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003900:	4a0a      	ldr	r2, [pc, #40]	@ (800392c <HAL_RCC_ClockConfig+0x360>)
 8003902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003904:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <HAL_RCC_ClockConfig+0x364>)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800390a:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <HAL_RCC_ClockConfig+0x368>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f810 	bl	8001934 <HAL_InitTick>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	58024400 	.word	0x58024400
 8003928:	080073f4 	.word	0x080073f4
 800392c:	24000004 	.word	0x24000004
 8003930:	24000000 	.word	0x24000000
 8003934:	24000194 	.word	0x24000194

08003938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	@ 0x24
 800393c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393e:	4bb3      	ldr	r3, [pc, #716]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003946:	2b18      	cmp	r3, #24
 8003948:	f200 8155 	bhi.w	8003bf6 <HAL_RCC_GetSysClockFreq+0x2be>
 800394c:	a201      	add	r2, pc, #4	@ (adr r2, 8003954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	080039b9 	.word	0x080039b9
 8003958:	08003bf7 	.word	0x08003bf7
 800395c:	08003bf7 	.word	0x08003bf7
 8003960:	08003bf7 	.word	0x08003bf7
 8003964:	08003bf7 	.word	0x08003bf7
 8003968:	08003bf7 	.word	0x08003bf7
 800396c:	08003bf7 	.word	0x08003bf7
 8003970:	08003bf7 	.word	0x08003bf7
 8003974:	080039df 	.word	0x080039df
 8003978:	08003bf7 	.word	0x08003bf7
 800397c:	08003bf7 	.word	0x08003bf7
 8003980:	08003bf7 	.word	0x08003bf7
 8003984:	08003bf7 	.word	0x08003bf7
 8003988:	08003bf7 	.word	0x08003bf7
 800398c:	08003bf7 	.word	0x08003bf7
 8003990:	08003bf7 	.word	0x08003bf7
 8003994:	080039e5 	.word	0x080039e5
 8003998:	08003bf7 	.word	0x08003bf7
 800399c:	08003bf7 	.word	0x08003bf7
 80039a0:	08003bf7 	.word	0x08003bf7
 80039a4:	08003bf7 	.word	0x08003bf7
 80039a8:	08003bf7 	.word	0x08003bf7
 80039ac:	08003bf7 	.word	0x08003bf7
 80039b0:	08003bf7 	.word	0x08003bf7
 80039b4:	080039eb 	.word	0x080039eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b8:	4b94      	ldr	r3, [pc, #592]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039c4:	4b91      	ldr	r3, [pc, #580]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	4a90      	ldr	r2, [pc, #576]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80039d6:	e111      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039da:	61bb      	str	r3, [r7, #24]
      break;
 80039dc:	e10e      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80039de:	4b8d      	ldr	r3, [pc, #564]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039e0:	61bb      	str	r3, [r7, #24]
      break;
 80039e2:	e10b      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80039e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039e6:	61bb      	str	r3, [r7, #24]
      break;
 80039e8:	e108      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ea:	4b88      	ldr	r3, [pc, #544]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039f4:	4b85      	ldr	r3, [pc, #532]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a00:	4b82      	ldr	r3, [pc, #520]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a0a:	4b80      	ldr	r3, [pc, #512]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0e:	08db      	lsrs	r3, r3, #3
 8003a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80e1 	beq.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	f000 8083 	beq.w	8003b3c <HAL_RCC_GetSysClockFreq+0x204>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	f200 80a1 	bhi.w	8003b80 <HAL_RCC_GetSysClockFreq+0x248>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x114>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d056      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a4a:	e099      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02d      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a58:	4b6c      	ldr	r3, [pc, #432]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	4a6b      	ldr	r2, [pc, #428]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b62      	ldr	r3, [pc, #392]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ab2:	e087      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003c20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac6:	4b51      	ldr	r3, [pc, #324]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ada:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003af6:	e065      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b40      	ldr	r3, [pc, #256]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b3a:	e043      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003c28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b7e:	e021      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b1e      	ldr	r3, [pc, #120]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003bc4:	4b11      	ldr	r3, [pc, #68]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bce:	3301      	adds	r3, #1
 8003bd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be8:	ee17 3a90 	vmov	r3, s15
 8003bec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003bee:	e005      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
      break;
 8003bf4:	e002      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003bf6:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bf8:	61bb      	str	r3, [r7, #24]
      break;
 8003bfa:	bf00      	nop
  }

  return sysclockfreq;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3724      	adds	r7, #36	@ 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	58024400 	.word	0x58024400
 8003c10:	03d09000 	.word	0x03d09000
 8003c14:	003d0900 	.word	0x003d0900
 8003c18:	016e3600 	.word	0x016e3600
 8003c1c:	46000000 	.word	0x46000000
 8003c20:	4c742400 	.word	0x4c742400
 8003c24:	4a742400 	.word	0x4a742400
 8003c28:	4bb71b00 	.word	0x4bb71b00

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c32:	f7ff fe81 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	490f      	ldr	r1, [pc, #60]	@ (8003c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c44:	5ccb      	ldrb	r3, [r1, r3]
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c50:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a07      	ldr	r2, [pc, #28]	@ (8003c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c6a:	4a07      	ldr	r2, [pc, #28]	@ (8003c88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	080073f4 	.word	0x080073f4
 8003c84:	24000004 	.word	0x24000004
 8003c88:	24000000 	.word	0x24000000

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c90:	f7ff ffcc 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4904      	ldr	r1, [pc, #16]	@ (8003cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	080073f4 	.word	0x080073f4

08003cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003cbc:	f7ff ffb6 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4904      	ldr	r1, [pc, #16]	@ (8003ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	080073f4 	.word	0x080073f4

08003ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce8:	b0ca      	sub	sp, #296	@ 0x128
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003d08:	2500      	movs	r5, #0
 8003d0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003d0e:	d049      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d1a:	d02f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d20:	d828      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d26:	d01a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d2c:	d822      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d36:	d007      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d38:	e01c      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3a:	4bb8      	ldr	r3, [pc, #736]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	4ab7      	ldr	r2, [pc, #732]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d46:	e01a      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	2102      	movs	r1, #2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fc8f 	bl	8005674 <RCCEx_PLL2_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d5c:	e00f      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	3328      	adds	r3, #40	@ 0x28
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fd36 	bl	80057d8 <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d72:	e004      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d86:	4ba5      	ldr	r3, [pc, #660]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d94:	4aa1      	ldr	r2, [pc, #644]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d96:	430b      	orrs	r3, r1
 8003d98:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003db0:	f04f 0900 	mov.w	r9, #0
 8003db4:	ea58 0309 	orrs.w	r3, r8, r9
 8003db8:	d047      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d82a      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003de1 	.word	0x08003de1
 8003dd0:	08003def 	.word	0x08003def
 8003dd4:	08003e05 	.word	0x08003e05
 8003dd8:	08003e23 	.word	0x08003e23
 8003ddc:	08003e23 	.word	0x08003e23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4b8e      	ldr	r3, [pc, #568]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	4a8d      	ldr	r2, [pc, #564]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dec:	e01a      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df2:	3308      	adds	r3, #8
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 fc3c 	bl	8005674 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e02:	e00f      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	3328      	adds	r3, #40	@ 0x28
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fce3 	bl	80057d8 <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e18:	e004      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e20:	e000      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e2c:	4b7b      	ldr	r3, [pc, #492]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e30:	f023 0107 	bic.w	r1, r3, #7
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	4a78      	ldr	r2, [pc, #480]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003e56:	f04f 0b00 	mov.w	fp, #0
 8003e5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e5e:	d04c      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6a:	d030      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e70:	d829      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e74:	d02d      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e78:	d825      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e7a:	2b80      	cmp	r3, #128	@ 0x80
 8003e7c:	d018      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003e7e:	2b80      	cmp	r3, #128	@ 0x80
 8003e80:	d821      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003e86:	2b40      	cmp	r3, #64	@ 0x40
 8003e88:	d007      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003e8a:	e01c      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8c:	4b63      	ldr	r3, [pc, #396]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e90:	4a62      	ldr	r2, [pc, #392]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e98:	e01c      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fbe6 	bl	8005674 <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003eae:	e011      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb4:	3328      	adds	r3, #40	@ 0x28
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 fc8d 	bl	80057d8 <RCCEx_PLL3_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003edc:	4b4f      	ldr	r3, [pc, #316]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eea:	4a4c      	ldr	r2, [pc, #304]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003f06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003f10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d053      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f26:	d035      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f2c:	d82e      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f32:	d031      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f38:	d828      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f3e:	d01a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f44:	d822      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f4e:	d007      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003f50:	e01c      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f52:	4b32      	ldr	r3, [pc, #200]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	4a31      	ldr	r2, [pc, #196]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f5e:	e01c      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	3308      	adds	r3, #8
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fb83 	bl	8005674 <RCCEx_PLL2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f74:	e011      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	3328      	adds	r3, #40	@ 0x28
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fc2a 	bl	80057d8 <RCCEx_PLL3_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f8a:	e006      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f92:	e002      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f94:	bf00      	nop
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003fce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003fd8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	d056      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003fea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fee:	d038      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ff4:	d831      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ff6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ffa:	d034      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ffc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004000:	d82b      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004006:	d01d      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800400c:	d825      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d006      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004018:	e01f      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800401a:	bf00      	nop
 800401c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004020:	4ba2      	ldr	r3, [pc, #648]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	4aa1      	ldr	r2, [pc, #644]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800402a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800402c:	e01c      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	3308      	adds	r3, #8
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f001 fb1c 	bl	8005674 <RCCEx_PLL2_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004042:	e011      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	3328      	adds	r3, #40	@ 0x28
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f001 fbc3 	bl	80057d8 <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004058:	e006      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004060:	e002      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004070:	4b8e      	ldr	r3, [pc, #568]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004080:	4a8a      	ldr	r2, [pc, #552]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004082:	430b      	orrs	r3, r1
 8004084:	6593      	str	r3, [r2, #88]	@ 0x58
 8004086:	e003      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800409c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80040a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80040aa:	460b      	mov	r3, r1
 80040ac:	4313      	orrs	r3, r2
 80040ae:	d03a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	2b30      	cmp	r3, #48	@ 0x30
 80040b8:	d01f      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80040ba:	2b30      	cmp	r3, #48	@ 0x30
 80040bc:	d819      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d00c      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d815      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d019      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d111      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ce:	4b77      	ldr	r3, [pc, #476]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	4a76      	ldr	r2, [pc, #472]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040da:	e011      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	3308      	adds	r3, #8
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fac5 	bl	8005674 <RCCEx_PLL2_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040f0:	e006      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040f8:	e002      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80040fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004108:	4b68      	ldr	r3, [pc, #416]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800410a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004116:	4a65      	ldr	r2, [pc, #404]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004118:	430b      	orrs	r3, r1
 800411a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800411c:	e003      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004132:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800413c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d051      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004150:	d035      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004152:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004156:	d82e      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004158:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800415c:	d031      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800415e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004162:	d828      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004168:	d01a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416e:	d822      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004178:	d007      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800417a:	e01c      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417c:	4b4b      	ldr	r3, [pc, #300]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	4a4a      	ldr	r2, [pc, #296]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004188:	e01c      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	3308      	adds	r3, #8
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f001 fa6e 	bl	8005674 <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800419e:	e011      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	3328      	adds	r3, #40	@ 0x28
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 fb15 	bl	80057d8 <RCCEx_PLL3_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041b4:	e006      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80041c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041cc:	4b37      	ldr	r3, [pc, #220]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041da:	4a34      	ldr	r2, [pc, #208]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	6513      	str	r3, [r2, #80]	@ 0x50
 80041e0:	e003      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80041f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041fa:	2300      	movs	r3, #0
 80041fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004200:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004204:	460b      	mov	r3, r1
 8004206:	4313      	orrs	r3, r2
 8004208:	d056      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004214:	d033      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004216:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800421a:	d82c      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800421c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004220:	d02f      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004222:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004226:	d826      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004228:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800422c:	d02b      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800422e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004232:	d820      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004238:	d012      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800423a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800423e:	d81a      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d022      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004248:	d115      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	3308      	adds	r3, #8
 8004250:	2101      	movs	r1, #1
 8004252:	4618      	mov	r0, r3
 8004254:	f001 fa0e 	bl	8005674 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800425e:	e015      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	3328      	adds	r3, #40	@ 0x28
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fab5 	bl	80057d8 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004274:	e00a      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427c:	e006      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800427e:	bf00      	nop
 8004280:	e004      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004282:	bf00      	nop
 8004284:	e002      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800428a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10d      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004298:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042a2:	4a02      	ldr	r2, [pc, #8]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80042aa:	bf00      	nop
 80042ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80042c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d055      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042e4:	d033      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80042e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ea:	d82c      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f0:	d02f      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f6:	d826      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042fc:	d02b      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80042fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004302:	d820      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004308:	d012      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800430a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800430e:	d81a      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d022      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004318:	d115      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431e:	3308      	adds	r3, #8
 8004320:	2101      	movs	r1, #1
 8004322:	4618      	mov	r0, r3
 8004324:	f001 f9a6 	bl	8005674 <RCCEx_PLL2_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800432e:	e015      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	3328      	adds	r3, #40	@ 0x28
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f001 fa4d 	bl	80057d8 <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004344:	e00a      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800434e:	bf00      	nop
 8004350:	e004      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800435a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004364:	4ba3      	ldr	r3, [pc, #652]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004368:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004374:	4a9f      	ldr	r2, [pc, #636]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004376:	430b      	orrs	r3, r1
 8004378:	6593      	str	r3, [r2, #88]	@ 0x58
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800439a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d037      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043ae:	d00e      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80043b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043b4:	d816      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80043ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043be:	d111      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c0:	4b8c      	ldr	r3, [pc, #560]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	4a8b      	ldr	r2, [pc, #556]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043cc:	e00f      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	3308      	adds	r3, #8
 80043d4:	2101      	movs	r1, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 f94c 	bl	8005674 <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043e2:	e004      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80043ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043f6:	4b7f      	ldr	r3, [pc, #508]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004404:	4a7b      	ldr	r2, [pc, #492]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004406:	430b      	orrs	r3, r1
 8004408:	6513      	str	r3, [r2, #80]	@ 0x50
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800442a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d039      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443a:	2b03      	cmp	r3, #3
 800443c:	d81c      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800443e:	a201      	add	r2, pc, #4	@ (adr r2, 8004444 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004481 	.word	0x08004481
 8004448:	08004455 	.word	0x08004455
 800444c:	08004463 	.word	0x08004463
 8004450:	08004481 	.word	0x08004481
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004454:	4b67      	ldr	r3, [pc, #412]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	4a66      	ldr	r2, [pc, #408]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800445e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004460:	e00f      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	3308      	adds	r3, #8
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f001 f902 	bl	8005674 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004476:	e004      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800447e:	e000      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800448a:	4b5a      	ldr	r3, [pc, #360]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800448c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448e:	f023 0103 	bic.w	r1, r3, #3
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004498:	4a56      	ldr	r2, [pc, #344]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800449a:	430b      	orrs	r3, r1
 800449c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800449e:	e003      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80044b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044b8:	2300      	movs	r3, #0
 80044ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f000 809f 	beq.w	8004608 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ca:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a4a      	ldr	r2, [pc, #296]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d6:	f7fd fa77 	bl	80019c8 <HAL_GetTick>
 80044da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044de:	e00b      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e0:	f7fd fa72 	bl	80019c8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	@ 0x64
 80044ee:	d903      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044f6:	e005      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f8:	4b3f      	ldr	r3, [pc, #252]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ed      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004508:	2b00      	cmp	r3, #0
 800450a:	d179      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800450c:	4b39      	ldr	r3, [pc, #228]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800450e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004518:	4053      	eors	r3, r2
 800451a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800451e:	2b00      	cmp	r3, #0
 8004520:	d015      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004522:	4b34      	ldr	r3, [pc, #208]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800452a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800452e:	4b31      	ldr	r3, [pc, #196]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004532:	4a30      	ldr	r2, [pc, #192]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004538:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800453a:	4b2e      	ldr	r3, [pc, #184]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	4a2d      	ldr	r2, [pc, #180]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004544:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004546:	4a2b      	ldr	r2, [pc, #172]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800454c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004552:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455a:	d118      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fa34 	bl	80019c8 <HAL_GetTick>
 8004560:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004564:	e00d      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fd fa2f 	bl	80019c8 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004576:	429a      	cmp	r2, r3
 8004578:	d903      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004580:	e005      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004582:	4b1c      	ldr	r3, [pc, #112]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0eb      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	2b00      	cmp	r3, #0
 8004594:	d129      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800459e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045a6:	d10e      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80045a8:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045b8:	091a      	lsrs	r2, r3, #4
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80045bc:	4013      	ands	r3, r2
 80045be:	4a0d      	ldr	r2, [pc, #52]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6113      	str	r3, [r2, #16]
 80045c4:	e005      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045d0:	6113      	str	r3, [r2, #16]
 80045d2:	4b08      	ldr	r3, [pc, #32]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e2:	4a04      	ldr	r2, [pc, #16]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e8:	e00e      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80045f4:	58024400 	.word	0x58024400
 80045f8:	58024800 	.word	0x58024800
 80045fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f002 0301 	and.w	r3, r2, #1
 8004614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800461e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	f000 8089 	beq.w	800473c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004630:	2b28      	cmp	r3, #40	@ 0x28
 8004632:	d86b      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004634:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004715 	.word	0x08004715
 8004640:	0800470d 	.word	0x0800470d
 8004644:	0800470d 	.word	0x0800470d
 8004648:	0800470d 	.word	0x0800470d
 800464c:	0800470d 	.word	0x0800470d
 8004650:	0800470d 	.word	0x0800470d
 8004654:	0800470d 	.word	0x0800470d
 8004658:	0800470d 	.word	0x0800470d
 800465c:	080046e1 	.word	0x080046e1
 8004660:	0800470d 	.word	0x0800470d
 8004664:	0800470d 	.word	0x0800470d
 8004668:	0800470d 	.word	0x0800470d
 800466c:	0800470d 	.word	0x0800470d
 8004670:	0800470d 	.word	0x0800470d
 8004674:	0800470d 	.word	0x0800470d
 8004678:	0800470d 	.word	0x0800470d
 800467c:	080046f7 	.word	0x080046f7
 8004680:	0800470d 	.word	0x0800470d
 8004684:	0800470d 	.word	0x0800470d
 8004688:	0800470d 	.word	0x0800470d
 800468c:	0800470d 	.word	0x0800470d
 8004690:	0800470d 	.word	0x0800470d
 8004694:	0800470d 	.word	0x0800470d
 8004698:	0800470d 	.word	0x0800470d
 800469c:	08004715 	.word	0x08004715
 80046a0:	0800470d 	.word	0x0800470d
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800470d 	.word	0x0800470d
 80046b0:	0800470d 	.word	0x0800470d
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	08004715 	.word	0x08004715
 80046c0:	0800470d 	.word	0x0800470d
 80046c4:	0800470d 	.word	0x0800470d
 80046c8:	0800470d 	.word	0x0800470d
 80046cc:	0800470d 	.word	0x0800470d
 80046d0:	0800470d 	.word	0x0800470d
 80046d4:	0800470d 	.word	0x0800470d
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	08004715 	.word	0x08004715
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e4:	3308      	adds	r3, #8
 80046e6:	2101      	movs	r1, #1
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 ffc3 	bl	8005674 <RCCEx_PLL2_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046f4:	e00f      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	3328      	adds	r3, #40	@ 0x28
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f86a 	bl	80057d8 <RCCEx_PLL3_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800470a:	e004      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800471e:	4bbf      	ldr	r3, [pc, #764]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800472c:	4abb      	ldr	r2, [pc, #748]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800472e:	430b      	orrs	r3, r1
 8004730:	6553      	str	r3, [r2, #84]	@ 0x54
 8004732:	e003      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800473c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f002 0302 	and.w	r3, r2, #2
 8004748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004752:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d041      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004762:	2b05      	cmp	r3, #5
 8004764:	d824      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004766:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	080047b9 	.word	0x080047b9
 8004770:	08004785 	.word	0x08004785
 8004774:	0800479b 	.word	0x0800479b
 8004778:	080047b9 	.word	0x080047b9
 800477c:	080047b9 	.word	0x080047b9
 8004780:	080047b9 	.word	0x080047b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	3308      	adds	r3, #8
 800478a:	2101      	movs	r1, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f000 ff71 	bl	8005674 <RCCEx_PLL2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004798:	e00f      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479e:	3328      	adds	r3, #40	@ 0x28
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 f818 	bl	80057d8 <RCCEx_PLL3_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047ae:	e004      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047b6:	e000      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80047b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047c2:	4b96      	ldr	r3, [pc, #600]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c6:	f023 0107 	bic.w	r1, r3, #7
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d0:	4a92      	ldr	r2, [pc, #584]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80047d6:	e003      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f002 0304 	and.w	r3, r2, #4
 80047ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d044      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004808:	2b05      	cmp	r3, #5
 800480a:	d825      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004861 	.word	0x08004861
 8004818:	0800482d 	.word	0x0800482d
 800481c:	08004843 	.word	0x08004843
 8004820:	08004861 	.word	0x08004861
 8004824:	08004861 	.word	0x08004861
 8004828:	08004861 	.word	0x08004861
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004830:	3308      	adds	r3, #8
 8004832:	2101      	movs	r1, #1
 8004834:	4618      	mov	r0, r3
 8004836:	f000 ff1d 	bl	8005674 <RCCEx_PLL2_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004840:	e00f      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	3328      	adds	r3, #40	@ 0x28
 8004848:	2101      	movs	r1, #1
 800484a:	4618      	mov	r0, r3
 800484c:	f000 ffc4 	bl	80057d8 <RCCEx_PLL3_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004856:	e004      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800486a:	4b6c      	ldr	r3, [pc, #432]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486e:	f023 0107 	bic.w	r1, r3, #7
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800487a:	4a68      	ldr	r2, [pc, #416]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800487c:	430b      	orrs	r3, r1
 800487e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004880:	e003      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f002 0320 	and.w	r3, r2, #32
 8004896:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800489a:	2300      	movs	r3, #0
 800489c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048a4:	460b      	mov	r3, r1
 80048a6:	4313      	orrs	r3, r2
 80048a8:	d055      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048b6:	d033      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80048b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048bc:	d82c      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c2:	d02f      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c8:	d826      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048ce:	d02b      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80048d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048d4:	d820      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048da:	d012      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80048dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e0:	d81a      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d022      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80048e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ea:	d115      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f0:	3308      	adds	r3, #8
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 febd 	bl	8005674 <RCCEx_PLL2_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004900:	e015      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	3328      	adds	r3, #40	@ 0x28
 8004908:	2102      	movs	r1, #2
 800490a:	4618      	mov	r0, r3
 800490c:	f000 ff64 	bl	80057d8 <RCCEx_PLL3_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004916:	e00a      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800491e:	e006      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004920:	bf00      	nop
 8004922:	e004      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004924:	bf00      	nop
 8004926:	e002      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800492c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004936:	4b39      	ldr	r3, [pc, #228]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004946:	4a35      	ldr	r2, [pc, #212]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004948:	430b      	orrs	r3, r1
 800494a:	6553      	str	r3, [r2, #84]	@ 0x54
 800494c:	e003      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800496c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004970:	460b      	mov	r3, r1
 8004972:	4313      	orrs	r3, r2
 8004974:	d058      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800497e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004982:	d033      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004984:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004988:	d82c      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800498a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498e:	d02f      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004994:	d826      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004996:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800499a:	d02b      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800499c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049a0:	d820      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049a6:	d012      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ac:	d81a      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d022      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b6:	d115      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	3308      	adds	r3, #8
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fe57 	bl	8005674 <RCCEx_PLL2_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049cc:	e015      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	3328      	adds	r3, #40	@ 0x28
 80049d4:	2102      	movs	r1, #2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fefe 	bl	80057d8 <RCCEx_PLL3_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049e2:	e00a      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ea:	e006      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049ec:	bf00      	nop
 80049ee:	e004      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049f0:	bf00      	nop
 80049f2:	e002      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10e      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a02:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a06:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a12:	4a02      	ldr	r2, [pc, #8]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a18:	e006      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a1a:	bf00      	nop
 8004a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a42:	460b      	mov	r3, r1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	d055      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a50:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a54:	d033      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004a56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a5a:	d82c      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a60:	d02f      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a66:	d826      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a68:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a6c:	d02b      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004a6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a72:	d820      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a78:	d012      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a7e:	d81a      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d022      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a88:	d115      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	3308      	adds	r3, #8
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fdee 	bl	8005674 <RCCEx_PLL2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a9e:	e015      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	3328      	adds	r3, #40	@ 0x28
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fe95 	bl	80057d8 <RCCEx_PLL3_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ab4:	e00a      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004abc:	e006      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e004      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ad4:	4ba1      	ldr	r3, [pc, #644]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ae4:	4a9d      	ldr	r2, [pc, #628]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aea:	e003      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f002 0308 	and.w	r3, r2, #8
 8004b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4313      	orrs	r3, r2
 8004b12:	d01e      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b26:	3328      	adds	r3, #40	@ 0x28
 8004b28:	2102      	movs	r1, #2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fe54 	bl	80057d8 <RCCEx_PLL3_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b3c:	4b87      	ldr	r3, [pc, #540]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b4c:	4a83      	ldr	r2, [pc, #524]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f002 0310 	and.w	r3, r2, #16
 8004b5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b62:	2300      	movs	r3, #0
 8004b64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d01e      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7e:	d10c      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	3328      	adds	r3, #40	@ 0x28
 8004b86:	2102      	movs	r1, #2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fe25 	bl	80057d8 <RCCEx_PLL3_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b9a:	4b70      	ldr	r3, [pc, #448]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004baa:	4a6c      	ldr	r2, [pc, #432]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bac:	430b      	orrs	r3, r1
 8004bae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bc6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d03e      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bdc:	d022      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004bde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004be2:	d81b      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d00b      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004bee:	e015      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fd3b 	bl	8005674 <RCCEx_PLL2_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c04:	e00f      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0a:	3328      	adds	r3, #40	@ 0x28
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fde2 	bl	80057d8 <RCCEx_PLL3_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c1a:	e004      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c22:	e000      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c3e:	4a47      	ldr	r2, [pc, #284]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c44:	e003      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c64:	460b      	mov	r3, r1
 8004c66:	4313      	orrs	r3, r2
 8004c68:	d03b      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c76:	d01f      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004c78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c7c:	d818      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c82:	d003      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004c84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c88:	d007      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004c8a:	e011      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8c:	4b33      	ldr	r3, [pc, #204]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4a32      	ldr	r2, [pc, #200]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c98:	e00f      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9e:	3328      	adds	r3, #40	@ 0x28
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fd98 	bl	80057d8 <RCCEx_PLL3_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc2:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd2:	4a22      	ldr	r2, [pc, #136]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004cee:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	d034      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0c:	d007      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004d0e:	e011      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d10:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	4a11      	ldr	r2, [pc, #68]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d1c:	e00e      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	3308      	adds	r3, #8
 8004d24:	2102      	movs	r1, #2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fca4 	bl	8005674 <RCCEx_PLL2_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d32:	e003      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10d      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d52:	4a02      	ldr	r2, [pc, #8]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d54:	430b      	orrs	r3, r1
 8004d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d58:	e006      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d76:	2300      	movs	r3, #0
 8004d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4313      	orrs	r3, r2
 8004d82:	d00c      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d88:	3328      	adds	r3, #40	@ 0x28
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fd23 	bl	80057d8 <RCCEx_PLL3_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004daa:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dac:	2300      	movs	r3, #0
 8004dae:	667b      	str	r3, [r7, #100]	@ 0x64
 8004db0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004db4:	460b      	mov	r3, r1
 8004db6:	4313      	orrs	r3, r2
 8004db8:	d038      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc6:	d018      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dcc:	d811      	bhi.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd2:	d014      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd8:	d80b      	bhi.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d011      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004de2:	d106      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de4:	4bc3      	ldr	r3, [pc, #780]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	4ac2      	ldr	r2, [pc, #776]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004df8:	e004      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dfa:	bf00      	nop
 8004dfc:	e002      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e0c:	4bb9      	ldr	r3, [pc, #740]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e1c:	4ab5      	ldr	r2, [pc, #724]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e22:	e003      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e42:	460b      	mov	r3, r1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	d009      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e48:	4baa      	ldr	r3, [pc, #680]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e56:	4aa7      	ldr	r2, [pc, #668]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004e68:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e72:	460b      	mov	r3, r1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e78:	4b9e      	ldr	r3, [pc, #632]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e88:	4a9a      	ldr	r2, [pc, #616]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eaa:	4b92      	ldr	r3, [pc, #584]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb8:	4a8e      	ldr	r2, [pc, #568]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ecc:	2300      	movs	r3, #0
 8004ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	d00e      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eda:	4b86      	ldr	r3, [pc, #536]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	4a85      	ldr	r2, [pc, #532]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ee0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ee4:	6113      	str	r3, [r2, #16]
 8004ee6:	4b83      	ldr	r3, [pc, #524]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ee8:	6919      	ldr	r1, [r3, #16]
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ef2:	4a80      	ldr	r2, [pc, #512]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d009      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f14:	4b77      	ldr	r3, [pc, #476]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f18:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f22:	4a74      	ldr	r2, [pc, #464]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f24:	430b      	orrs	r3, r1
 8004f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f36:	2300      	movs	r3, #0
 8004f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4313      	orrs	r3, r2
 8004f42:	d00a      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f44:	4b6b      	ldr	r3, [pc, #428]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f48:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f54:	4a67      	ldr	r2, [pc, #412]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f56:	430b      	orrs	r3, r1
 8004f58:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	2100      	movs	r1, #0
 8004f64:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f70:	460b      	mov	r3, r1
 8004f72:	4313      	orrs	r3, r2
 8004f74:	d011      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fb78 	bl	8005674 <RCCEx_PLL2_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	6239      	str	r1, [r7, #32]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	d011      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fba:	3308      	adds	r3, #8
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fb58 	bl	8005674 <RCCEx_PLL2_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	61b9      	str	r1, [r7, #24]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	d011      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	2102      	movs	r1, #2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fb38 	bl	8005674 <RCCEx_PLL2_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800500a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	2100      	movs	r1, #0
 8005024:	6139      	str	r1, [r7, #16]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005030:	460b      	mov	r3, r1
 8005032:	4313      	orrs	r3, r2
 8005034:	d011      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503a:	3328      	adds	r3, #40	@ 0x28
 800503c:	2100      	movs	r1, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fbca 	bl	80057d8 <RCCEx_PLL3_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	2100      	movs	r1, #0
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005070:	460b      	mov	r3, r1
 8005072:	4313      	orrs	r3, r2
 8005074:	d011      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507a:	3328      	adds	r3, #40	@ 0x28
 800507c:	2101      	movs	r1, #1
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fbaa 	bl	80057d8 <RCCEx_PLL3_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800508a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	2100      	movs	r1, #0
 80050a4:	6039      	str	r1, [r7, #0]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050b0:	460b      	mov	r3, r1
 80050b2:	4313      	orrs	r3, r2
 80050b4:	d011      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	3328      	adds	r3, #40	@ 0x28
 80050bc:	2102      	movs	r1, #2
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fb8a 	bl	80057d8 <RCCEx_PLL3_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80050da:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80050ee:	46bd      	mov	sp, r7
 80050f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f4:	58024400 	.word	0x58024400

080050f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050fc:	f7fe fd96 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8005100:	4602      	mov	r2, r0
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	091b      	lsrs	r3, r3, #4
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	4904      	ldr	r1, [pc, #16]	@ (8005120 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800510e:	5ccb      	ldrb	r3, [r1, r3]
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005118:	4618      	mov	r0, r3
 800511a:	bd80      	pop	{r7, pc}
 800511c:	58024400 	.word	0x58024400
 8005120:	080073f4 	.word	0x080073f4

08005124 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	@ 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800512c:	4ba1      	ldr	r3, [pc, #644]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005136:	4b9f      	ldr	r3, [pc, #636]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	0b1b      	lsrs	r3, r3, #12
 800513c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005140:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005142:	4b9c      	ldr	r3, [pc, #624]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800514e:	4b99      	ldr	r3, [pc, #612]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	08db      	lsrs	r3, r3, #3
 8005154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8111 	beq.w	8005394 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b02      	cmp	r3, #2
 8005176:	f000 8083 	beq.w	8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b02      	cmp	r3, #2
 800517e:	f200 80a1 	bhi.w	80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d056      	beq.n	800523c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800518e:	e099      	b.n	80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005190:	4b88      	ldr	r3, [pc, #544]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02d      	beq.n	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800519c:	4b85      	ldr	r3, [pc, #532]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	08db      	lsrs	r3, r3, #3
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	4a84      	ldr	r2, [pc, #528]	@ (80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c6:	4b7b      	ldr	r3, [pc, #492]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80051f6:	e087      	b.n	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520a:	4b6a      	ldr	r3, [pc, #424]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521a:	ed97 6a03 	vldr	s12, [r7, #12]
 800521e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800522e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800523a:	e065      	b.n	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800524a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524e:	4b59      	ldr	r3, [pc, #356]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005262:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800527e:	e043      	b.n	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	4b48      	ldr	r3, [pc, #288]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052c2:	e021      	b.n	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d6:	4b37      	ldr	r3, [pc, #220]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005306:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005308:	4b2a      	ldr	r3, [pc, #168]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	0a5b      	lsrs	r3, r3, #9
 800530e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800531e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005322:	edd7 6a07 	vldr	s13, [r7, #28]
 8005326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800532a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800532e:	ee17 2a90 	vmov	r2, s15
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005336:	4b1f      	ldr	r3, [pc, #124]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	0c1b      	lsrs	r3, r3, #16
 800533c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005348:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800534c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005350:	edd7 6a07 	vldr	s13, [r7, #28]
 8005354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535c:	ee17 2a90 	vmov	r2, s15
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005364:	4b13      	ldr	r3, [pc, #76]	@ (80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005368:	0e1b      	lsrs	r3, r3, #24
 800536a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800537a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800537e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538a:	ee17 2a90 	vmov	r2, s15
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005392:	e008      	b.n	80053a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	609a      	str	r2, [r3, #8]
}
 80053a6:	bf00      	nop
 80053a8:	3724      	adds	r7, #36	@ 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	58024400 	.word	0x58024400
 80053b8:	03d09000 	.word	0x03d09000
 80053bc:	46000000 	.word	0x46000000
 80053c0:	4c742400 	.word	0x4c742400
 80053c4:	4a742400 	.word	0x4a742400
 80053c8:	4bb71b00 	.word	0x4bb71b00

080053cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b089      	sub	sp, #36	@ 0x24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053d4:	4ba1      	ldr	r3, [pc, #644]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80053de:	4b9f      	ldr	r3, [pc, #636]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	0d1b      	lsrs	r3, r3, #20
 80053e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053ea:	4b9c      	ldr	r3, [pc, #624]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80053f6:	4b99      	ldr	r3, [pc, #612]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fa:	08db      	lsrs	r3, r3, #3
 80053fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	fb02 f303 	mul.w	r3, r2, r3
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8111 	beq.w	800563c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b02      	cmp	r3, #2
 800541e:	f000 8083 	beq.w	8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b02      	cmp	r3, #2
 8005426:	f200 80a1 	bhi.w	800556c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d056      	beq.n	80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005436:	e099      	b.n	800556c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005438:	4b88      	ldr	r3, [pc, #544]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02d      	beq.n	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005444:	4b85      	ldr	r3, [pc, #532]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	08db      	lsrs	r3, r3, #3
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	4a84      	ldr	r2, [pc, #528]	@ (8005660 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
 8005454:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	ee07 3a90 	vmov	s15, r3
 800545c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546e:	4b7b      	ldr	r3, [pc, #492]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005482:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800549e:	e087      	b.n	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80054ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b2:	4b6a      	ldr	r3, [pc, #424]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054e2:	e065      	b.n	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800566c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f6:	4b59      	ldr	r3, [pc, #356]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005506:	ed97 6a03 	vldr	s12, [r7, #12]
 800550a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800550e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800551a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005526:	e043      	b.n	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553a:	4b48      	ldr	r3, [pc, #288]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554a:	ed97 6a03 	vldr	s12, [r7, #12]
 800554e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800555e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800556a:	e021      	b.n	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005576:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800566c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800557a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800557e:	4b37      	ldr	r3, [pc, #220]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005592:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800559e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80055b0:	4b2a      	ldr	r3, [pc, #168]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	0a5b      	lsrs	r3, r3, #9
 80055b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d6:	ee17 2a90 	vmov	r2, s15
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80055de:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e8:	ee07 3a90 	vmov	s15, r3
 80055ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80055fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005604:	ee17 2a90 	vmov	r2, s15
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800560c:	4b13      	ldr	r3, [pc, #76]	@ (800565c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	0e1b      	lsrs	r3, r3, #24
 8005612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005622:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005626:	edd7 6a07 	vldr	s13, [r7, #28]
 800562a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005632:	ee17 2a90 	vmov	r2, s15
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800563a:	e008      	b.n	800564e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	609a      	str	r2, [r3, #8]
}
 800564e:	bf00      	nop
 8005650:	3724      	adds	r7, #36	@ 0x24
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	58024400 	.word	0x58024400
 8005660:	03d09000 	.word	0x03d09000
 8005664:	46000000 	.word	0x46000000
 8005668:	4c742400 	.word	0x4c742400
 800566c:	4a742400 	.word	0x4a742400
 8005670:	4bb71b00 	.word	0x4bb71b00

08005674 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005682:	4b53      	ldr	r3, [pc, #332]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b03      	cmp	r3, #3
 800568c:	d101      	bne.n	8005692 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e099      	b.n	80057c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005692:	4b4f      	ldr	r3, [pc, #316]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4e      	ldr	r2, [pc, #312]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005698:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800569c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800569e:	f7fc f993 	bl	80019c8 <HAL_GetTick>
 80056a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056a4:	e008      	b.n	80056b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056a6:	f7fc f98f 	bl	80019c8 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e086      	b.n	80057c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056b8:	4b45      	ldr	r3, [pc, #276]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056c4:	4b42      	ldr	r3, [pc, #264]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	031b      	lsls	r3, r3, #12
 80056d2:	493f      	ldr	r1, [pc, #252]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	3b01      	subs	r3, #1
 80056de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	025b      	lsls	r3, r3, #9
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	3b01      	subs	r3, #1
 8005702:	061b      	lsls	r3, r3, #24
 8005704:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005708:	4931      	ldr	r1, [pc, #196]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 800570a:	4313      	orrs	r3, r2
 800570c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800570e:	4b30      	ldr	r3, [pc, #192]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	492d      	ldr	r1, [pc, #180]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 800571c:	4313      	orrs	r3, r2
 800571e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005720:	4b2b      	ldr	r3, [pc, #172]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	f023 0220 	bic.w	r2, r3, #32
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	4928      	ldr	r1, [pc, #160]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005732:	4b27      	ldr	r3, [pc, #156]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	4a26      	ldr	r2, [pc, #152]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005738:	f023 0310 	bic.w	r3, r3, #16
 800573c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800573e:	4b24      	ldr	r3, [pc, #144]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005742:	4b24      	ldr	r3, [pc, #144]	@ (80057d4 <RCCEx_PLL2_Config+0x160>)
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	69d2      	ldr	r2, [r2, #28]
 800574a:	00d2      	lsls	r2, r2, #3
 800574c:	4920      	ldr	r1, [pc, #128]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005752:	4b1f      	ldr	r3, [pc, #124]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005756:	4a1e      	ldr	r2, [pc, #120]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005758:	f043 0310 	orr.w	r3, r3, #16
 800575c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005764:	4b1a      	ldr	r3, [pc, #104]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	4a19      	ldr	r2, [pc, #100]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 800576a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800576e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005770:	e00f      	b.n	8005792 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d106      	bne.n	8005786 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005778:	4b15      	ldr	r3, [pc, #84]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	4a14      	ldr	r2, [pc, #80]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 800577e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005782:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005784:	e005      	b.n	8005792 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005786:	4b12      	ldr	r3, [pc, #72]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	4a11      	ldr	r2, [pc, #68]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 800578c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005790:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005792:	4b0f      	ldr	r3, [pc, #60]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0e      	ldr	r2, [pc, #56]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 8005798:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800579c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579e:	f7fc f913 	bl	80019c8 <HAL_GetTick>
 80057a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057a4:	e008      	b.n	80057b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057a6:	f7fc f90f 	bl	80019c8 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e006      	b.n	80057c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <RCCEx_PLL2_Config+0x15c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	58024400 	.word	0x58024400
 80057d4:	ffff0007 	.word	0xffff0007

080057d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057e6:	4b53      	ldr	r3, [pc, #332]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d101      	bne.n	80057f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e099      	b.n	800592a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80057f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80057fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005802:	f7fc f8e1 	bl	80019c8 <HAL_GetTick>
 8005806:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005808:	e008      	b.n	800581c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800580a:	f7fc f8dd 	bl	80019c8 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e086      	b.n	800592a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800581c:	4b45      	ldr	r3, [pc, #276]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f0      	bne.n	800580a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005828:	4b42      	ldr	r3, [pc, #264]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	051b      	lsls	r3, r3, #20
 8005836:	493f      	ldr	r1, [pc, #252]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 8005838:	4313      	orrs	r3, r2
 800583a:	628b      	str	r3, [r1, #40]	@ 0x28
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	3b01      	subs	r3, #1
 8005842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	3b01      	subs	r3, #1
 800584c:	025b      	lsls	r3, r3, #9
 800584e:	b29b      	uxth	r3, r3
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	3b01      	subs	r3, #1
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	3b01      	subs	r3, #1
 8005866:	061b      	lsls	r3, r3, #24
 8005868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800586c:	4931      	ldr	r1, [pc, #196]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 800586e:	4313      	orrs	r3, r2
 8005870:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005872:	4b30      	ldr	r3, [pc, #192]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	492d      	ldr	r1, [pc, #180]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 8005880:	4313      	orrs	r3, r2
 8005882:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005884:	4b2b      	ldr	r3, [pc, #172]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 8005886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005888:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	4928      	ldr	r1, [pc, #160]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005896:	4b27      	ldr	r3, [pc, #156]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 800589c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058a2:	4b24      	ldr	r3, [pc, #144]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058a6:	4b24      	ldr	r3, [pc, #144]	@ (8005938 <RCCEx_PLL3_Config+0x160>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	69d2      	ldr	r2, [r2, #28]
 80058ae:	00d2      	lsls	r2, r2, #3
 80058b0:	4920      	ldr	r1, [pc, #128]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058cc:	4a19      	ldr	r2, [pc, #100]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058d4:	e00f      	b.n	80058f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d106      	bne.n	80058ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80058dc:	4b15      	ldr	r3, [pc, #84]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e0:	4a14      	ldr	r2, [pc, #80]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058e8:	e005      	b.n	80058f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80058ea:	4b12      	ldr	r3, [pc, #72]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	4a11      	ldr	r2, [pc, #68]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80058f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 80058fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005902:	f7fc f861 	bl	80019c8 <HAL_GetTick>
 8005906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005908:	e008      	b.n	800591c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800590a:	f7fc f85d 	bl	80019c8 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e006      	b.n	800592a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800591c:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <RCCEx_PLL3_Config+0x15c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	58024400 	.word	0x58024400
 8005938:	ffff0007 	.word	0xffff0007

0800593c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e10f      	b.n	8005b6e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a87      	ldr	r2, [pc, #540]	@ (8005b78 <HAL_SPI_Init+0x23c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00f      	beq.n	800597e <HAL_SPI_Init+0x42>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a86      	ldr	r2, [pc, #536]	@ (8005b7c <HAL_SPI_Init+0x240>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00a      	beq.n	800597e <HAL_SPI_Init+0x42>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a84      	ldr	r2, [pc, #528]	@ (8005b80 <HAL_SPI_Init+0x244>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d005      	beq.n	800597e <HAL_SPI_Init+0x42>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d901      	bls.n	800597e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e0f7      	b.n	8005b6e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f900 	bl	8005b84 <SPI_GetPacketSize>
 8005984:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7b      	ldr	r2, [pc, #492]	@ (8005b78 <HAL_SPI_Init+0x23c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00c      	beq.n	80059aa <HAL_SPI_Init+0x6e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a79      	ldr	r2, [pc, #484]	@ (8005b7c <HAL_SPI_Init+0x240>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <HAL_SPI_Init+0x6e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a78      	ldr	r2, [pc, #480]	@ (8005b80 <HAL_SPI_Init+0x244>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d002      	beq.n	80059aa <HAL_SPI_Init+0x6e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d811      	bhi.n	80059ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059ae:	4a72      	ldr	r2, [pc, #456]	@ (8005b78 <HAL_SPI_Init+0x23c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a70      	ldr	r2, [pc, #448]	@ (8005b7c <HAL_SPI_Init+0x240>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_SPI_Init+0x8c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a6f      	ldr	r2, [pc, #444]	@ (8005b80 <HAL_SPI_Init+0x244>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d104      	bne.n	80059d2 <HAL_SPI_Init+0x96>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d901      	bls.n	80059d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0cd      	b.n	8005b6e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fb fdd0 	bl	800158c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0201 	bic.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005a0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a18:	d119      	bne.n	8005a4e <HAL_SPI_Init+0x112>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a22:	d103      	bne.n	8005a2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10c      	bne.n	8005a4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a3c:	d107      	bne.n	8005a4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00f      	beq.n	8005a7a <HAL_SPI_Init+0x13e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b06      	cmp	r3, #6
 8005a60:	d90b      	bls.n	8005a7a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	e007      	b.n	8005a8a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	431a      	orrs	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9c:	ea42 0103 	orr.w	r1, r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aea:	ea42 0103 	orr.w	r1, r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d113      	bne.n	8005b2a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40013000 	.word	0x40013000
 8005b7c:	40003800 	.word	0x40003800
 8005b80:	40003c00 	.word	0x40003c00

08005b84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3307      	adds	r3, #7
 8005ba2:	08db      	lsrs	r3, r3, #3
 8005ba4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e042      	b.n	8005c52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fb fd3c 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2224      	movs	r2, #36	@ 0x24
 8005be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fd91 	bl	800672c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f826 	bl	8005c5c <UART_SetConfig>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e01b      	b.n	8005c52 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fe10 	bl	8006870 <UART_CheckIdleState>
 8005c50:	4603      	mov	r3, r0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c60:	b092      	sub	sp, #72	@ 0x48
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	431a      	orrs	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4bbe      	ldr	r3, [pc, #760]	@ (8005f84 <UART_SetConfig+0x328>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4ab3      	ldr	r2, [pc, #716]	@ (8005f88 <UART_SetConfig+0x32c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	4baf      	ldr	r3, [pc, #700]	@ (8005f8c <UART_SetConfig+0x330>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	f023 010f 	bic.w	r1, r3, #15
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4aa6      	ldr	r2, [pc, #664]	@ (8005f90 <UART_SetConfig+0x334>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d177      	bne.n	8005dec <UART_SetConfig+0x190>
 8005cfc:	4ba5      	ldr	r3, [pc, #660]	@ (8005f94 <UART_SetConfig+0x338>)
 8005cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d04:	2b28      	cmp	r3, #40	@ 0x28
 8005d06:	d86d      	bhi.n	8005de4 <UART_SetConfig+0x188>
 8005d08:	a201      	add	r2, pc, #4	@ (adr r2, 8005d10 <UART_SetConfig+0xb4>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005db5 	.word	0x08005db5
 8005d14:	08005de5 	.word	0x08005de5
 8005d18:	08005de5 	.word	0x08005de5
 8005d1c:	08005de5 	.word	0x08005de5
 8005d20:	08005de5 	.word	0x08005de5
 8005d24:	08005de5 	.word	0x08005de5
 8005d28:	08005de5 	.word	0x08005de5
 8005d2c:	08005de5 	.word	0x08005de5
 8005d30:	08005dbd 	.word	0x08005dbd
 8005d34:	08005de5 	.word	0x08005de5
 8005d38:	08005de5 	.word	0x08005de5
 8005d3c:	08005de5 	.word	0x08005de5
 8005d40:	08005de5 	.word	0x08005de5
 8005d44:	08005de5 	.word	0x08005de5
 8005d48:	08005de5 	.word	0x08005de5
 8005d4c:	08005de5 	.word	0x08005de5
 8005d50:	08005dc5 	.word	0x08005dc5
 8005d54:	08005de5 	.word	0x08005de5
 8005d58:	08005de5 	.word	0x08005de5
 8005d5c:	08005de5 	.word	0x08005de5
 8005d60:	08005de5 	.word	0x08005de5
 8005d64:	08005de5 	.word	0x08005de5
 8005d68:	08005de5 	.word	0x08005de5
 8005d6c:	08005de5 	.word	0x08005de5
 8005d70:	08005dcd 	.word	0x08005dcd
 8005d74:	08005de5 	.word	0x08005de5
 8005d78:	08005de5 	.word	0x08005de5
 8005d7c:	08005de5 	.word	0x08005de5
 8005d80:	08005de5 	.word	0x08005de5
 8005d84:	08005de5 	.word	0x08005de5
 8005d88:	08005de5 	.word	0x08005de5
 8005d8c:	08005de5 	.word	0x08005de5
 8005d90:	08005dd5 	.word	0x08005dd5
 8005d94:	08005de5 	.word	0x08005de5
 8005d98:	08005de5 	.word	0x08005de5
 8005d9c:	08005de5 	.word	0x08005de5
 8005da0:	08005de5 	.word	0x08005de5
 8005da4:	08005de5 	.word	0x08005de5
 8005da8:	08005de5 	.word	0x08005de5
 8005dac:	08005de5 	.word	0x08005de5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e222      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e21e      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e21a      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e216      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e212      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005ddc:	2340      	movs	r3, #64	@ 0x40
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e20e      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005de4:	2380      	movs	r3, #128	@ 0x80
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e20a      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a69      	ldr	r2, [pc, #420]	@ (8005f98 <UART_SetConfig+0x33c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d130      	bne.n	8005e58 <UART_SetConfig+0x1fc>
 8005df6:	4b67      	ldr	r3, [pc, #412]	@ (8005f94 <UART_SetConfig+0x338>)
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d826      	bhi.n	8005e50 <UART_SetConfig+0x1f4>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <UART_SetConfig+0x1ac>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e21 	.word	0x08005e21
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e31 	.word	0x08005e31
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e41 	.word	0x08005e41
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e1ec      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e1e8      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e1e4      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e1e0      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e40:	2320      	movs	r3, #32
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e1dc      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e48:	2340      	movs	r3, #64	@ 0x40
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e1d8      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e1d4      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a4f      	ldr	r2, [pc, #316]	@ (8005f9c <UART_SetConfig+0x340>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d130      	bne.n	8005ec4 <UART_SetConfig+0x268>
 8005e62:	4b4c      	ldr	r3, [pc, #304]	@ (8005f94 <UART_SetConfig+0x338>)
 8005e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d826      	bhi.n	8005ebc <UART_SetConfig+0x260>
 8005e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <UART_SetConfig+0x218>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e8d 	.word	0x08005e8d
 8005e78:	08005e95 	.word	0x08005e95
 8005e7c:	08005e9d 	.word	0x08005e9d
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e1b6      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e94:	2304      	movs	r3, #4
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e1b2      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e1ae      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e1aa      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e1a6      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005eb4:	2340      	movs	r3, #64	@ 0x40
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e1a2      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005ebc:	2380      	movs	r3, #128	@ 0x80
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e19e      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a35      	ldr	r2, [pc, #212]	@ (8005fa0 <UART_SetConfig+0x344>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d130      	bne.n	8005f30 <UART_SetConfig+0x2d4>
 8005ece:	4b31      	ldr	r3, [pc, #196]	@ (8005f94 <UART_SetConfig+0x338>)
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	2b05      	cmp	r3, #5
 8005ed8:	d826      	bhi.n	8005f28 <UART_SetConfig+0x2cc>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <UART_SetConfig+0x284>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005ef9 	.word	0x08005ef9
 8005ee4:	08005f01 	.word	0x08005f01
 8005ee8:	08005f09 	.word	0x08005f09
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e180      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e17c      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e178      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e174      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f18:	2320      	movs	r3, #32
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e170      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f20:	2340      	movs	r3, #64	@ 0x40
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e16c      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f28:	2380      	movs	r3, #128	@ 0x80
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2e:	e168      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	@ (8005fa4 <UART_SetConfig+0x348>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d142      	bne.n	8005fc0 <UART_SetConfig+0x364>
 8005f3a:	4b16      	ldr	r3, [pc, #88]	@ (8005f94 <UART_SetConfig+0x338>)
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d838      	bhi.n	8005fb8 <UART_SetConfig+0x35c>
 8005f46:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <UART_SetConfig+0x2f0>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f65 	.word	0x08005f65
 8005f50:	08005f6d 	.word	0x08005f6d
 8005f54:	08005f75 	.word	0x08005f75
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005fa9 	.word	0x08005fa9
 8005f60:	08005fb1 	.word	0x08005fb1
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e14a      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e146      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f74:	2308      	movs	r3, #8
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e142      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e13e      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005f84:	cfff69f3 	.word	0xcfff69f3
 8005f88:	58000c00 	.word	0x58000c00
 8005f8c:	11fff4ff 	.word	0x11fff4ff
 8005f90:	40011000 	.word	0x40011000
 8005f94:	58024400 	.word	0x58024400
 8005f98:	40004400 	.word	0x40004400
 8005f9c:	40004800 	.word	0x40004800
 8005fa0:	40004c00 	.word	0x40004c00
 8005fa4:	40005000 	.word	0x40005000
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e128      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005fb0:	2340      	movs	r3, #64	@ 0x40
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e124      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005fb8:	2380      	movs	r3, #128	@ 0x80
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e120      	b.n	8006202 <UART_SetConfig+0x5a6>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4acb      	ldr	r2, [pc, #812]	@ (80062f4 <UART_SetConfig+0x698>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d176      	bne.n	80060b8 <UART_SetConfig+0x45c>
 8005fca:	4bcb      	ldr	r3, [pc, #812]	@ (80062f8 <UART_SetConfig+0x69c>)
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fd2:	2b28      	cmp	r3, #40	@ 0x28
 8005fd4:	d86c      	bhi.n	80060b0 <UART_SetConfig+0x454>
 8005fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <UART_SetConfig+0x380>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08006081 	.word	0x08006081
 8005fe0:	080060b1 	.word	0x080060b1
 8005fe4:	080060b1 	.word	0x080060b1
 8005fe8:	080060b1 	.word	0x080060b1
 8005fec:	080060b1 	.word	0x080060b1
 8005ff0:	080060b1 	.word	0x080060b1
 8005ff4:	080060b1 	.word	0x080060b1
 8005ff8:	080060b1 	.word	0x080060b1
 8005ffc:	08006089 	.word	0x08006089
 8006000:	080060b1 	.word	0x080060b1
 8006004:	080060b1 	.word	0x080060b1
 8006008:	080060b1 	.word	0x080060b1
 800600c:	080060b1 	.word	0x080060b1
 8006010:	080060b1 	.word	0x080060b1
 8006014:	080060b1 	.word	0x080060b1
 8006018:	080060b1 	.word	0x080060b1
 800601c:	08006091 	.word	0x08006091
 8006020:	080060b1 	.word	0x080060b1
 8006024:	080060b1 	.word	0x080060b1
 8006028:	080060b1 	.word	0x080060b1
 800602c:	080060b1 	.word	0x080060b1
 8006030:	080060b1 	.word	0x080060b1
 8006034:	080060b1 	.word	0x080060b1
 8006038:	080060b1 	.word	0x080060b1
 800603c:	08006099 	.word	0x08006099
 8006040:	080060b1 	.word	0x080060b1
 8006044:	080060b1 	.word	0x080060b1
 8006048:	080060b1 	.word	0x080060b1
 800604c:	080060b1 	.word	0x080060b1
 8006050:	080060b1 	.word	0x080060b1
 8006054:	080060b1 	.word	0x080060b1
 8006058:	080060b1 	.word	0x080060b1
 800605c:	080060a1 	.word	0x080060a1
 8006060:	080060b1 	.word	0x080060b1
 8006064:	080060b1 	.word	0x080060b1
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060b1 	.word	0x080060b1
 8006078:	080060b1 	.word	0x080060b1
 800607c:	080060a9 	.word	0x080060a9
 8006080:	2301      	movs	r3, #1
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e0bc      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608e:	e0b8      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	e0b4      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e0b0      	b.n	8006202 <UART_SetConfig+0x5a6>
 80060a0:	2320      	movs	r3, #32
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e0ac      	b.n	8006202 <UART_SetConfig+0x5a6>
 80060a8:	2340      	movs	r3, #64	@ 0x40
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e0a8      	b.n	8006202 <UART_SetConfig+0x5a6>
 80060b0:	2380      	movs	r3, #128	@ 0x80
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e0a4      	b.n	8006202 <UART_SetConfig+0x5a6>
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a8f      	ldr	r2, [pc, #572]	@ (80062fc <UART_SetConfig+0x6a0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d130      	bne.n	8006124 <UART_SetConfig+0x4c8>
 80060c2:	4b8d      	ldr	r3, [pc, #564]	@ (80062f8 <UART_SetConfig+0x69c>)
 80060c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d826      	bhi.n	800611c <UART_SetConfig+0x4c0>
 80060ce:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <UART_SetConfig+0x478>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060ed 	.word	0x080060ed
 80060d8:	080060f5 	.word	0x080060f5
 80060dc:	080060fd 	.word	0x080060fd
 80060e0:	08006105 	.word	0x08006105
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	08006115 	.word	0x08006115
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e086      	b.n	8006202 <UART_SetConfig+0x5a6>
 80060f4:	2304      	movs	r3, #4
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e082      	b.n	8006202 <UART_SetConfig+0x5a6>
 80060fc:	2308      	movs	r3, #8
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e07e      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006104:	2310      	movs	r3, #16
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e07a      	b.n	8006202 <UART_SetConfig+0x5a6>
 800610c:	2320      	movs	r3, #32
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e076      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006114:	2340      	movs	r3, #64	@ 0x40
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e072      	b.n	8006202 <UART_SetConfig+0x5a6>
 800611c:	2380      	movs	r3, #128	@ 0x80
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006122:	e06e      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a75      	ldr	r2, [pc, #468]	@ (8006300 <UART_SetConfig+0x6a4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d130      	bne.n	8006190 <UART_SetConfig+0x534>
 800612e:	4b72      	ldr	r3, [pc, #456]	@ (80062f8 <UART_SetConfig+0x69c>)
 8006130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b05      	cmp	r3, #5
 8006138:	d826      	bhi.n	8006188 <UART_SetConfig+0x52c>
 800613a:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <UART_SetConfig+0x4e4>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006159 	.word	0x08006159
 8006144:	08006161 	.word	0x08006161
 8006148:	08006169 	.word	0x08006169
 800614c:	08006171 	.word	0x08006171
 8006150:	08006179 	.word	0x08006179
 8006154:	08006181 	.word	0x08006181
 8006158:	2300      	movs	r3, #0
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e050      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006160:	2304      	movs	r3, #4
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e04c      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006168:	2308      	movs	r3, #8
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e048      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006170:	2310      	movs	r3, #16
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e044      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006178:	2320      	movs	r3, #32
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e040      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006180:	2340      	movs	r3, #64	@ 0x40
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e03c      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e038      	b.n	8006202 <UART_SetConfig+0x5a6>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a5b      	ldr	r2, [pc, #364]	@ (8006304 <UART_SetConfig+0x6a8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d130      	bne.n	80061fc <UART_SetConfig+0x5a0>
 800619a:	4b57      	ldr	r3, [pc, #348]	@ (80062f8 <UART_SetConfig+0x69c>)
 800619c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d826      	bhi.n	80061f4 <UART_SetConfig+0x598>
 80061a6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <UART_SetConfig+0x550>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061c5 	.word	0x080061c5
 80061b0:	080061cd 	.word	0x080061cd
 80061b4:	080061d5 	.word	0x080061d5
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e01a      	b.n	8006202 <UART_SetConfig+0x5a6>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e016      	b.n	8006202 <UART_SetConfig+0x5a6>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e012      	b.n	8006202 <UART_SetConfig+0x5a6>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e00e      	b.n	8006202 <UART_SetConfig+0x5a6>
 80061e4:	2320      	movs	r3, #32
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e00a      	b.n	8006202 <UART_SetConfig+0x5a6>
 80061ec:	2340      	movs	r3, #64	@ 0x40
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e006      	b.n	8006202 <UART_SetConfig+0x5a6>
 80061f4:	2380      	movs	r3, #128	@ 0x80
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e002      	b.n	8006202 <UART_SetConfig+0x5a6>
 80061fc:	2380      	movs	r3, #128	@ 0x80
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3f      	ldr	r2, [pc, #252]	@ (8006304 <UART_SetConfig+0x6a8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	f040 80f8 	bne.w	80063fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800620e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006212:	2b20      	cmp	r3, #32
 8006214:	dc46      	bgt.n	80062a4 <UART_SetConfig+0x648>
 8006216:	2b02      	cmp	r3, #2
 8006218:	f2c0 8082 	blt.w	8006320 <UART_SetConfig+0x6c4>
 800621c:	3b02      	subs	r3, #2
 800621e:	2b1e      	cmp	r3, #30
 8006220:	d87e      	bhi.n	8006320 <UART_SetConfig+0x6c4>
 8006222:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <UART_SetConfig+0x5cc>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	080062ab 	.word	0x080062ab
 800622c:	08006321 	.word	0x08006321
 8006230:	080062b3 	.word	0x080062b3
 8006234:	08006321 	.word	0x08006321
 8006238:	08006321 	.word	0x08006321
 800623c:	08006321 	.word	0x08006321
 8006240:	080062c3 	.word	0x080062c3
 8006244:	08006321 	.word	0x08006321
 8006248:	08006321 	.word	0x08006321
 800624c:	08006321 	.word	0x08006321
 8006250:	08006321 	.word	0x08006321
 8006254:	08006321 	.word	0x08006321
 8006258:	08006321 	.word	0x08006321
 800625c:	08006321 	.word	0x08006321
 8006260:	080062d3 	.word	0x080062d3
 8006264:	08006321 	.word	0x08006321
 8006268:	08006321 	.word	0x08006321
 800626c:	08006321 	.word	0x08006321
 8006270:	08006321 	.word	0x08006321
 8006274:	08006321 	.word	0x08006321
 8006278:	08006321 	.word	0x08006321
 800627c:	08006321 	.word	0x08006321
 8006280:	08006321 	.word	0x08006321
 8006284:	08006321 	.word	0x08006321
 8006288:	08006321 	.word	0x08006321
 800628c:	08006321 	.word	0x08006321
 8006290:	08006321 	.word	0x08006321
 8006294:	08006321 	.word	0x08006321
 8006298:	08006321 	.word	0x08006321
 800629c:	08006321 	.word	0x08006321
 80062a0:	08006313 	.word	0x08006313
 80062a4:	2b40      	cmp	r3, #64	@ 0x40
 80062a6:	d037      	beq.n	8006318 <UART_SetConfig+0x6bc>
 80062a8:	e03a      	b.n	8006320 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062aa:	f7fe ff25 	bl	80050f8 <HAL_RCCEx_GetD3PCLK1Freq>
 80062ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062b0:	e03c      	b.n	800632c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe ff34 	bl	8005124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c0:	e034      	b.n	800632c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062c2:	f107 0318 	add.w	r3, r7, #24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff f880 	bl	80053cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d0:	e02c      	b.n	800632c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d2:	4b09      	ldr	r3, [pc, #36]	@ (80062f8 <UART_SetConfig+0x69c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062de:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <UART_SetConfig+0x69c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	08db      	lsrs	r3, r3, #3
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	4a07      	ldr	r2, [pc, #28]	@ (8006308 <UART_SetConfig+0x6ac>)
 80062ea:	fa22 f303 	lsr.w	r3, r2, r3
 80062ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062f0:	e01c      	b.n	800632c <UART_SetConfig+0x6d0>
 80062f2:	bf00      	nop
 80062f4:	40011400 	.word	0x40011400
 80062f8:	58024400 	.word	0x58024400
 80062fc:	40007800 	.word	0x40007800
 8006300:	40007c00 	.word	0x40007c00
 8006304:	58000c00 	.word	0x58000c00
 8006308:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800630c:	4b9d      	ldr	r3, [pc, #628]	@ (8006584 <UART_SetConfig+0x928>)
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006310:	e00c      	b.n	800632c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006312:	4b9d      	ldr	r3, [pc, #628]	@ (8006588 <UART_SetConfig+0x92c>)
 8006314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006316:	e009      	b.n	800632c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006318:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800631c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631e:	e005      	b.n	800632c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800632a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800632c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 81de 	beq.w	80066f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	4a94      	ldr	r2, [pc, #592]	@ (800658c <UART_SetConfig+0x930>)
 800633a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633e:	461a      	mov	r2, r3
 8006340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006342:	fbb3 f3f2 	udiv	r3, r3, r2
 8006346:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	4413      	add	r3, r2
 8006352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006354:	429a      	cmp	r2, r3
 8006356:	d305      	bcc.n	8006364 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800635e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006360:	429a      	cmp	r2, r3
 8006362:	d903      	bls.n	800636c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800636a:	e1c1      	b.n	80066f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800636c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800636e:	2200      	movs	r2, #0
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	60fa      	str	r2, [r7, #12]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	4a84      	ldr	r2, [pc, #528]	@ (800658c <UART_SetConfig+0x930>)
 800637a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800637e:	b29b      	uxth	r3, r3
 8006380:	2200      	movs	r2, #0
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800638a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800638e:	f7f9 ffa3 	bl	80002d8 <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4610      	mov	r0, r2
 8006398:	4619      	mov	r1, r3
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	020b      	lsls	r3, r1, #8
 80063a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063a8:	0202      	lsls	r2, r0, #8
 80063aa:	6979      	ldr	r1, [r7, #20]
 80063ac:	6849      	ldr	r1, [r1, #4]
 80063ae:	0849      	lsrs	r1, r1, #1
 80063b0:	2000      	movs	r0, #0
 80063b2:	460c      	mov	r4, r1
 80063b4:	4605      	mov	r5, r0
 80063b6:	eb12 0804 	adds.w	r8, r2, r4
 80063ba:	eb43 0905 	adc.w	r9, r3, r5
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	469a      	mov	sl, r3
 80063c6:	4693      	mov	fp, r2
 80063c8:	4652      	mov	r2, sl
 80063ca:	465b      	mov	r3, fp
 80063cc:	4640      	mov	r0, r8
 80063ce:	4649      	mov	r1, r9
 80063d0:	f7f9 ff82 	bl	80002d8 <__aeabi_uldivmod>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4613      	mov	r3, r2
 80063da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e2:	d308      	bcc.n	80063f6 <UART_SetConfig+0x79a>
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ea:	d204      	bcs.n	80063f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063f2:	60da      	str	r2, [r3, #12]
 80063f4:	e17c      	b.n	80066f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063fc:	e178      	b.n	80066f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006406:	f040 80c5 	bne.w	8006594 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800640a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800640e:	2b20      	cmp	r3, #32
 8006410:	dc48      	bgt.n	80064a4 <UART_SetConfig+0x848>
 8006412:	2b00      	cmp	r3, #0
 8006414:	db7b      	blt.n	800650e <UART_SetConfig+0x8b2>
 8006416:	2b20      	cmp	r3, #32
 8006418:	d879      	bhi.n	800650e <UART_SetConfig+0x8b2>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <UART_SetConfig+0x7c4>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	080064ab 	.word	0x080064ab
 8006424:	080064b3 	.word	0x080064b3
 8006428:	0800650f 	.word	0x0800650f
 800642c:	0800650f 	.word	0x0800650f
 8006430:	080064bb 	.word	0x080064bb
 8006434:	0800650f 	.word	0x0800650f
 8006438:	0800650f 	.word	0x0800650f
 800643c:	0800650f 	.word	0x0800650f
 8006440:	080064cb 	.word	0x080064cb
 8006444:	0800650f 	.word	0x0800650f
 8006448:	0800650f 	.word	0x0800650f
 800644c:	0800650f 	.word	0x0800650f
 8006450:	0800650f 	.word	0x0800650f
 8006454:	0800650f 	.word	0x0800650f
 8006458:	0800650f 	.word	0x0800650f
 800645c:	0800650f 	.word	0x0800650f
 8006460:	080064db 	.word	0x080064db
 8006464:	0800650f 	.word	0x0800650f
 8006468:	0800650f 	.word	0x0800650f
 800646c:	0800650f 	.word	0x0800650f
 8006470:	0800650f 	.word	0x0800650f
 8006474:	0800650f 	.word	0x0800650f
 8006478:	0800650f 	.word	0x0800650f
 800647c:	0800650f 	.word	0x0800650f
 8006480:	0800650f 	.word	0x0800650f
 8006484:	0800650f 	.word	0x0800650f
 8006488:	0800650f 	.word	0x0800650f
 800648c:	0800650f 	.word	0x0800650f
 8006490:	0800650f 	.word	0x0800650f
 8006494:	0800650f 	.word	0x0800650f
 8006498:	0800650f 	.word	0x0800650f
 800649c:	0800650f 	.word	0x0800650f
 80064a0:	08006501 	.word	0x08006501
 80064a4:	2b40      	cmp	r3, #64	@ 0x40
 80064a6:	d02e      	beq.n	8006506 <UART_SetConfig+0x8aa>
 80064a8:	e031      	b.n	800650e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064aa:	f7fd fbef 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 80064ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064b0:	e033      	b.n	800651a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b2:	f7fd fc01 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 80064b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064b8:	e02f      	b.n	800651a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe fe30 	bl	8005124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c8:	e027      	b.n	800651a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ca:	f107 0318 	add.w	r3, r7, #24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe ff7c 	bl	80053cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d8:	e01f      	b.n	800651a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064da:	4b2d      	ldr	r3, [pc, #180]	@ (8006590 <UART_SetConfig+0x934>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006590 <UART_SetConfig+0x934>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	08db      	lsrs	r3, r3, #3
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	4a24      	ldr	r2, [pc, #144]	@ (8006584 <UART_SetConfig+0x928>)
 80064f2:	fa22 f303 	lsr.w	r3, r2, r3
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064f8:	e00f      	b.n	800651a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80064fa:	4b22      	ldr	r3, [pc, #136]	@ (8006584 <UART_SetConfig+0x928>)
 80064fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064fe:	e00c      	b.n	800651a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006500:	4b21      	ldr	r3, [pc, #132]	@ (8006588 <UART_SetConfig+0x92c>)
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006504:	e009      	b.n	800651a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650c:	e005      	b.n	800651a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800651a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 80e7 	beq.w	80066f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	4a19      	ldr	r2, [pc, #100]	@ (800658c <UART_SetConfig+0x930>)
 8006528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800652c:	461a      	mov	r2, r3
 800652e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006530:	fbb3 f3f2 	udiv	r3, r3, r2
 8006534:	005a      	lsls	r2, r3, #1
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	441a      	add	r2, r3
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	fbb2 f3f3 	udiv	r3, r2, r3
 8006546:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	2b0f      	cmp	r3, #15
 800654c:	d916      	bls.n	800657c <UART_SetConfig+0x920>
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006554:	d212      	bcs.n	800657c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	b29b      	uxth	r3, r3
 800655a:	f023 030f 	bic.w	r3, r3, #15
 800655e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	b29b      	uxth	r3, r3
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	b29a      	uxth	r2, r3
 800656c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800656e:	4313      	orrs	r3, r2
 8006570:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006578:	60da      	str	r2, [r3, #12]
 800657a:	e0b9      	b.n	80066f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006582:	e0b5      	b.n	80066f0 <UART_SetConfig+0xa94>
 8006584:	03d09000 	.word	0x03d09000
 8006588:	003d0900 	.word	0x003d0900
 800658c:	08007c8c 	.word	0x08007c8c
 8006590:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006594:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006598:	2b20      	cmp	r3, #32
 800659a:	dc49      	bgt.n	8006630 <UART_SetConfig+0x9d4>
 800659c:	2b00      	cmp	r3, #0
 800659e:	db7c      	blt.n	800669a <UART_SetConfig+0xa3e>
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d87a      	bhi.n	800669a <UART_SetConfig+0xa3e>
 80065a4:	a201      	add	r2, pc, #4	@ (adr r2, 80065ac <UART_SetConfig+0x950>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	08006637 	.word	0x08006637
 80065b0:	0800663f 	.word	0x0800663f
 80065b4:	0800669b 	.word	0x0800669b
 80065b8:	0800669b 	.word	0x0800669b
 80065bc:	08006647 	.word	0x08006647
 80065c0:	0800669b 	.word	0x0800669b
 80065c4:	0800669b 	.word	0x0800669b
 80065c8:	0800669b 	.word	0x0800669b
 80065cc:	08006657 	.word	0x08006657
 80065d0:	0800669b 	.word	0x0800669b
 80065d4:	0800669b 	.word	0x0800669b
 80065d8:	0800669b 	.word	0x0800669b
 80065dc:	0800669b 	.word	0x0800669b
 80065e0:	0800669b 	.word	0x0800669b
 80065e4:	0800669b 	.word	0x0800669b
 80065e8:	0800669b 	.word	0x0800669b
 80065ec:	08006667 	.word	0x08006667
 80065f0:	0800669b 	.word	0x0800669b
 80065f4:	0800669b 	.word	0x0800669b
 80065f8:	0800669b 	.word	0x0800669b
 80065fc:	0800669b 	.word	0x0800669b
 8006600:	0800669b 	.word	0x0800669b
 8006604:	0800669b 	.word	0x0800669b
 8006608:	0800669b 	.word	0x0800669b
 800660c:	0800669b 	.word	0x0800669b
 8006610:	0800669b 	.word	0x0800669b
 8006614:	0800669b 	.word	0x0800669b
 8006618:	0800669b 	.word	0x0800669b
 800661c:	0800669b 	.word	0x0800669b
 8006620:	0800669b 	.word	0x0800669b
 8006624:	0800669b 	.word	0x0800669b
 8006628:	0800669b 	.word	0x0800669b
 800662c:	0800668d 	.word	0x0800668d
 8006630:	2b40      	cmp	r3, #64	@ 0x40
 8006632:	d02e      	beq.n	8006692 <UART_SetConfig+0xa36>
 8006634:	e031      	b.n	800669a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006636:	f7fd fb29 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 800663a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800663c:	e033      	b.n	80066a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663e:	f7fd fb3b 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 8006642:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006644:	e02f      	b.n	80066a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fd6a 	bl	8005124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006654:	e027      	b.n	80066a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006656:	f107 0318 	add.w	r3, r7, #24
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe feb6 	bl	80053cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006664:	e01f      	b.n	80066a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006666:	4b2d      	ldr	r3, [pc, #180]	@ (800671c <UART_SetConfig+0xac0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006672:	4b2a      	ldr	r3, [pc, #168]	@ (800671c <UART_SetConfig+0xac0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	08db      	lsrs	r3, r3, #3
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	4a28      	ldr	r2, [pc, #160]	@ (8006720 <UART_SetConfig+0xac4>)
 800667e:	fa22 f303 	lsr.w	r3, r2, r3
 8006682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006684:	e00f      	b.n	80066a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006686:	4b26      	ldr	r3, [pc, #152]	@ (8006720 <UART_SetConfig+0xac4>)
 8006688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800668a:	e00c      	b.n	80066a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800668c:	4b25      	ldr	r3, [pc, #148]	@ (8006724 <UART_SetConfig+0xac8>)
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006690:	e009      	b.n	80066a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006698:	e005      	b.n	80066a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066a4:	bf00      	nop
    }

    if (pclk != 0U)
 80066a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d021      	beq.n	80066f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006728 <UART_SetConfig+0xacc>)
 80066b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b6:	461a      	mov	r2, r3
 80066b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	441a      	add	r2, r3
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	2b0f      	cmp	r3, #15
 80066d4:	d909      	bls.n	80066ea <UART_SetConfig+0xa8e>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066dc:	d205      	bcs.n	80066ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60da      	str	r2, [r3, #12]
 80066e8:	e002      	b.n	80066f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2200      	movs	r2, #0
 8006704:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800670c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006710:	4618      	mov	r0, r3
 8006712:	3748      	adds	r7, #72	@ 0x48
 8006714:	46bd      	mov	sp, r7
 8006716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800671a:	bf00      	nop
 800671c:	58024400 	.word	0x58024400
 8006720:	03d09000 	.word	0x03d09000
 8006724:	003d0900 	.word	0x003d0900
 8006728:	08007c8c 	.word	0x08007c8c

0800672c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01a      	beq.n	8006842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800682a:	d10a      	bne.n	8006842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	605a      	str	r2, [r3, #4]
  }
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b098      	sub	sp, #96	@ 0x60
 8006874:	af02      	add	r7, sp, #8
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006880:	f7fb f8a2 	bl	80019c8 <HAL_GetTick>
 8006884:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d12f      	bne.n	80068f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006894:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800689c:	2200      	movs	r2, #0
 800689e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f88e 	bl	80069c4 <UART_WaitOnFlagUntilTimeout>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d022      	beq.n	80068f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e6      	bne.n	80068ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e063      	b.n	80069bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d149      	bne.n	8006996 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006902:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800690a:	2200      	movs	r2, #0
 800690c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f857 	bl	80069c4 <UART_WaitOnFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d03c      	beq.n	8006996 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	623b      	str	r3, [r7, #32]
   return(result);
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006930:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800693a:	633b      	str	r3, [r7, #48]	@ 0x30
 800693c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e6      	bne.n	800691c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	60fb      	str	r3, [r7, #12]
   return(result);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800696e:	61fa      	str	r2, [r7, #28]
 8006970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	69b9      	ldr	r1, [r7, #24]
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	617b      	str	r3, [r7, #20]
   return(result);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e012      	b.n	80069bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3758      	adds	r7, #88	@ 0x58
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	4613      	mov	r3, r2
 80069d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d4:	e04f      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069dc:	d04b      	beq.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069de:	f7fa fff3 	bl	80019c8 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e04e      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d037      	beq.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b80      	cmp	r3, #128	@ 0x80
 8006a0a:	d034      	beq.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b40      	cmp	r3, #64	@ 0x40
 8006a10:	d031      	beq.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d110      	bne.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2208      	movs	r2, #8
 8006a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f839 	bl	8006aa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2208      	movs	r2, #8
 8006a32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e029      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a50:	d111      	bne.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f81f 	bl	8006aa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e00f      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	bf0c      	ite	eq
 8006a86:	2301      	moveq	r3, #1
 8006a88:	2300      	movne	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d0a0      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b095      	sub	sp, #84	@ 0x54
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ac8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006acc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e6      	bne.n	8006aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	4b1e      	ldr	r3, [pc, #120]	@ (8006b68 <UART_EndRxTransfer+0xc8>)
 8006aee:	4013      	ands	r3, r2
 8006af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3308      	adds	r3, #8
 8006af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006afc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e5      	bne.n	8006ada <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d118      	bne.n	8006b48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f023 0310 	bic.w	r3, r3, #16
 8006b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6979      	ldr	r1, [r7, #20]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	613b      	str	r3, [r7, #16]
   return(result);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e6      	bne.n	8006b16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b5c:	bf00      	nop
 8006b5e:	3754      	adds	r7, #84	@ 0x54
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	effffffe 	.word	0xeffffffe

08006b6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e027      	b.n	8006bd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2224      	movs	r2, #36	@ 0x24
 8006b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d101      	bne.n	8006bf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e02d      	b.n	8006c52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2224      	movs	r2, #36	@ 0x24
 8006c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f850 	bl	8006cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e02d      	b.n	8006cce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2224      	movs	r2, #36	@ 0x24
 8006c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f812 	bl	8006cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d108      	bne.n	8006cfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cf8:	e031      	b.n	8006d5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cfa:	2310      	movs	r3, #16
 8006cfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cfe:	2310      	movs	r3, #16
 8006d00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	0e5b      	lsrs	r3, r3, #25
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	0f5b      	lsrs	r3, r3, #29
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	7b3a      	ldrb	r2, [r7, #12]
 8006d26:	4911      	ldr	r1, [pc, #68]	@ (8006d6c <UARTEx_SetNbDataToProcess+0x94>)
 8006d28:	5c8a      	ldrb	r2, [r1, r2]
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d2e:	7b3a      	ldrb	r2, [r7, #12]
 8006d30:	490f      	ldr	r1, [pc, #60]	@ (8006d70 <UARTEx_SetNbDataToProcess+0x98>)
 8006d32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	7b7a      	ldrb	r2, [r7, #13]
 8006d44:	4909      	ldr	r1, [pc, #36]	@ (8006d6c <UARTEx_SetNbDataToProcess+0x94>)
 8006d46:	5c8a      	ldrb	r2, [r1, r2]
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d4c:	7b7a      	ldrb	r2, [r7, #13]
 8006d4e:	4908      	ldr	r1, [pc, #32]	@ (8006d70 <UARTEx_SetNbDataToProcess+0x98>)
 8006d50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d5e:	bf00      	nop
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	08007ca4 	.word	0x08007ca4
 8006d70:	08007cac 	.word	0x08007cac

08006d74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d74:	b084      	sub	sp, #16
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	f107 001c 	add.w	r0, r7, #28
 8006d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d86:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d121      	bne.n	8006dd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e50 <USB_CoreInit+0xdc>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006db2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d105      	bne.n	8006dc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 faaa 	bl	8007320 <USB_CoreReset>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e01b      	b.n	8006e0a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fa9e 	bl	8007320 <USB_CoreReset>
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006de8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8006dfc:	e005      	b.n	8006e0a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e0a:	7fbb      	ldrb	r3, [r7, #30]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d116      	bne.n	8006e3e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <USB_CoreInit+0xe0>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f043 0206 	orr.w	r2, r3, #6
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f043 0220 	orr.w	r2, r3, #32
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e4a:	b004      	add	sp, #16
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	ffbdffbf 	.word	0xffbdffbf
 8006e54:	03ee0000 	.word	0x03ee0000

08006e58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f023 0201 	bic.w	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d115      	bne.n	8006ec8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ea8:	200a      	movs	r0, #10
 8006eaa:	f7fa fd99 	bl	80019e0 <HAL_Delay>
      ms += 10U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	330a      	adds	r3, #10
 8006eb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa25 	bl	8007304 <USB_GetMode>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d01e      	beq.n	8006efe <USB_SetCurrentMode+0x84>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ec4:	d9f0      	bls.n	8006ea8 <USB_SetCurrentMode+0x2e>
 8006ec6:	e01a      	b.n	8006efe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d115      	bne.n	8006efa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006eda:	200a      	movs	r0, #10
 8006edc:	f7fa fd80 	bl	80019e0 <HAL_Delay>
      ms += 10U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	330a      	adds	r3, #10
 8006ee4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa0c 	bl	8007304 <USB_GetMode>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <USB_SetCurrentMode+0x84>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ef6:	d9f0      	bls.n	8006eda <USB_SetCurrentMode+0x60>
 8006ef8:	e001      	b.n	8006efe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e005      	b.n	8006f0a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f02:	d101      	bne.n	8006f08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f14:	b084      	sub	sp, #16
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b086      	sub	sp, #24
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	e009      	b.n	8006f48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3340      	adds	r3, #64	@ 0x40
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	2200      	movs	r2, #0
 8006f40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3301      	adds	r3, #1
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b0e      	cmp	r3, #14
 8006f4c:	d9f2      	bls.n	8006f34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d11c      	bne.n	8006f90 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f64:	f043 0302 	orr.w	r3, r3, #2
 8006f68:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	e005      	b.n	8006f9c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fa8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d10d      	bne.n	8006fcc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d104      	bne.n	8006fc2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fb8:	2100      	movs	r1, #0
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f968 	bl	8007290 <USB_SetDevSpeed>
 8006fc0:	e008      	b.n	8006fd4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f963 	bl	8007290 <USB_SetDevSpeed>
 8006fca:	e003      	b.n	8006fd4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fcc:	2103      	movs	r1, #3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f95e 	bl	8007290 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fd4:	2110      	movs	r1, #16
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8fa 	bl	80071d0 <USB_FlushTxFifo>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f924 	bl	8007234 <USB_FlushRxFifo>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007008:	461a      	mov	r2, r3
 800700a:	2300      	movs	r3, #0
 800700c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007014:	461a      	mov	r2, r3
 8007016:	2300      	movs	r3, #0
 8007018:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	e043      	b.n	80070a8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007032:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007036:	d118      	bne.n	800706a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704a:	461a      	mov	r2, r3
 800704c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e013      	b.n	800707c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007060:	461a      	mov	r2, r3
 8007062:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	e008      	b.n	800707c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007076:	461a      	mov	r2, r3
 8007078:	2300      	movs	r3, #0
 800707a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007088:	461a      	mov	r2, r3
 800708a:	2300      	movs	r3, #0
 800708c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800709a:	461a      	mov	r2, r3
 800709c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3301      	adds	r3, #1
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070ac:	461a      	mov	r2, r3
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d3b5      	bcc.n	8007020 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070b4:	2300      	movs	r3, #0
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	e043      	b.n	8007142 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070d0:	d118      	bne.n	8007104 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e4:	461a      	mov	r2, r3
 80070e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	e013      	b.n	8007116 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fa:	461a      	mov	r2, r3
 80070fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e008      	b.n	8007116 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007110:	461a      	mov	r2, r3
 8007112:	2300      	movs	r3, #0
 8007114:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007122:	461a      	mov	r2, r3
 8007124:	2300      	movs	r3, #0
 8007126:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007134:	461a      	mov	r2, r3
 8007136:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800713a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	3301      	adds	r3, #1
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007146:	461a      	mov	r2, r3
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	4293      	cmp	r3, r2
 800714c:	d3b5      	bcc.n	80070ba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800715c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007160:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800716e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007170:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f043 0210 	orr.w	r2, r3, #16
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	4b0f      	ldr	r3, [pc, #60]	@ (80071c8 <USB_DevInit+0x2b4>)
 800718a:	4313      	orrs	r3, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007190:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	f043 0208 	orr.w	r2, r3, #8
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d105      	bne.n	80071b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <USB_DevInit+0x2b8>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071c4:	b004      	add	sp, #16
 80071c6:	4770      	bx	lr
 80071c8:	803c3800 	.word	0x803c3800
 80071cc:	40000004 	.word	0x40000004

080071d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3301      	adds	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071ea:	d901      	bls.n	80071f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e01b      	b.n	8007228 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	daf2      	bge.n	80071de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	019b      	lsls	r3, r3, #6
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007214:	d901      	bls.n	800721a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e006      	b.n	8007228 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b20      	cmp	r3, #32
 8007224:	d0f0      	beq.n	8007208 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800724c:	d901      	bls.n	8007252 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e018      	b.n	8007284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	daf2      	bge.n	8007240 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2210      	movs	r2, #16
 8007262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007270:	d901      	bls.n	8007276 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e006      	b.n	8007284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b10      	cmp	r3, #16
 8007280:	d0f0      	beq.n	8007264 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072b0:	4313      	orrs	r3, r2
 80072b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072dc:	f023 0303 	bic.w	r3, r3, #3
 80072e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072f0:	f043 0302 	orr.w	r3, r3, #2
 80072f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0301 	and.w	r3, r3, #1
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007338:	d901      	bls.n	800733e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e01b      	b.n	8007376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	daf2      	bge.n	800732c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f043 0201 	orr.w	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007362:	d901      	bls.n	8007368 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e006      	b.n	8007376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b01      	cmp	r3, #1
 8007372:	d0f0      	beq.n	8007356 <USB_CoreReset+0x36>

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <memset>:
 8007382:	4402      	add	r2, r0
 8007384:	4603      	mov	r3, r0
 8007386:	4293      	cmp	r3, r2
 8007388:	d100      	bne.n	800738c <memset+0xa>
 800738a:	4770      	bx	lr
 800738c:	f803 1b01 	strb.w	r1, [r3], #1
 8007390:	e7f9      	b.n	8007386 <memset+0x4>
	...

08007394 <__libc_init_array>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4d0d      	ldr	r5, [pc, #52]	@ (80073cc <__libc_init_array+0x38>)
 8007398:	4c0d      	ldr	r4, [pc, #52]	@ (80073d0 <__libc_init_array+0x3c>)
 800739a:	1b64      	subs	r4, r4, r5
 800739c:	10a4      	asrs	r4, r4, #2
 800739e:	2600      	movs	r6, #0
 80073a0:	42a6      	cmp	r6, r4
 80073a2:	d109      	bne.n	80073b8 <__libc_init_array+0x24>
 80073a4:	4d0b      	ldr	r5, [pc, #44]	@ (80073d4 <__libc_init_array+0x40>)
 80073a6:	4c0c      	ldr	r4, [pc, #48]	@ (80073d8 <__libc_init_array+0x44>)
 80073a8:	f000 f818 	bl	80073dc <_init>
 80073ac:	1b64      	subs	r4, r4, r5
 80073ae:	10a4      	asrs	r4, r4, #2
 80073b0:	2600      	movs	r6, #0
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	d105      	bne.n	80073c2 <__libc_init_array+0x2e>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073bc:	4798      	blx	r3
 80073be:	3601      	adds	r6, #1
 80073c0:	e7ee      	b.n	80073a0 <__libc_init_array+0xc>
 80073c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c6:	4798      	blx	r3
 80073c8:	3601      	adds	r6, #1
 80073ca:	e7f2      	b.n	80073b2 <__libc_init_array+0x1e>
 80073cc:	08007cbc 	.word	0x08007cbc
 80073d0:	08007cbc 	.word	0x08007cbc
 80073d4:	08007cbc 	.word	0x08007cbc
 80073d8:	08007cc0 	.word	0x08007cc0

080073dc <_init>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr

080073e8 <_fini>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr
